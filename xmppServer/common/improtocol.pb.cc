// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_improtocol_2eproto() {
  delete MsgInfo::default_instance_;
  delete MsgListReq::default_instance_;
  delete MsgList::default_instance_;
  delete UserOfflineIND::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_improtocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_improtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MsgInfo::default_instance_ = new MsgInfo();
  MsgListReq::default_instance_ = new MsgListReq();
  MsgList::default_instance_ = new MsgList();
  UserOfflineIND::default_instance_ = new UserOfflineIND();
  MsgInfo::default_instance_->InitAsDefaultInstance();
  MsgListReq::default_instance_->InitAsDefaultInstance();
  MsgList::default_instance_->InitAsDefaultInstance();
  UserOfflineIND::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improtocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improtocol_2eproto_once_);
void protobuf_AddDesc_improtocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improtocol_2eproto_once_,
                 &protobuf_AddDesc_improtocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improtocol_2eproto {
  StaticDescriptorInitializer_improtocol_2eproto() {
    protobuf_AddDesc_improtocol_2eproto();
  }
} static_descriptor_initializer_improtocol_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgInfo::kMsgidFieldNumber;
const int MsgInfo::kUuidFieldNumber;
const int MsgInfo::kFromidFieldNumber;
const int MsgInfo::kToidFieldNumber;
const int MsgInfo::kSendTimeFieldNumber;
const int MsgInfo::kDataFieldNumber;
const int MsgInfo::kFromnicknameFieldNumber;
const int MsgInfo::kFontSizeFieldNumber;
const int MsgInfo::kFontColorFieldNumber;
const int MsgInfo::kFontStyleFieldNumber;
const int MsgInfo::kFontNameFieldNumber;
const int MsgInfo::kDatatypeFieldNumber;
#endif  // !_MSC_VER

MsgInfo::MsgInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgInfo)
}

void MsgInfo::InitAsDefaultInstance() {
}

MsgInfo::MsgInfo(const MsgInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgInfo)
}

void MsgInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromid_ = 0u;
  toid_ = 0u;
  send_time_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontsize_ = 0u;
  fontcolor_ = 0u;
  fontstyle_ = 0u;
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:MsgInfo)
  SharedDtor();
}

void MsgInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (fromnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromnickname_;
  }
  if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgInfo& MsgInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgInfo* MsgInfo::default_instance_ = NULL;

MsgInfo* MsgInfo::New() const {
  return new MsgInfo;
}

void MsgInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msgid_, send_time_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_fromnickname()) {
      if (fromnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromnickname_->clear();
      }
    }
    fontsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(fontstyle_, datatype_);
    fontcolor_ = 0u;
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fontname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fromid;
        break;
      }

      // optional uint32 fromid = 3;
      case 3: {
        if (tag == 24) {
         parse_fromid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_toid;
        break;
      }

      // optional uint32 toid = 4;
      case 4: {
        if (tag == 32) {
         parse_toid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 5;
      case 5: {
        if (tag == 40) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional string data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fromnickname;
        break;
      }

      // optional string fromnickname = 7;
      case 7: {
        if (tag == 58) {
         parse_fromnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fontSize;
        break;
      }

      // optional uint32 fontSize = 8;
      case 8: {
        if (tag == 64) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fontColor;
        break;
      }

      // optional uint32 fontColor = 9;
      case 9: {
        if (tag == 72) {
         parse_fontColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontcolor_)));
          set_has_fontcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fontStyle;
        break;
      }

      // optional uint32 fontStyle = 10;
      case 10: {
        if (tag == 80) {
         parse_fontStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontstyle_)));
          set_has_fontstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fontName;
        break;
      }

      // optional string fontName = 11;
      case 11: {
        if (tag == 90) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_datatype;
        break;
      }

      // optional uint32 datatype = 12;
      case 12: {
        if (tag == 96) {
         parse_datatype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgInfo)
  return false;
#undef DO_
}

void MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgInfo)
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint32 fromid = 3;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fromid(), output);
  }

  // optional uint32 toid = 4;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->toid(), output);
  }

  // optional uint32 send_time = 5;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->send_time(), output);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  // optional string fromnickname = 7;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fromnickname(), output);
  }

  // optional uint32 fontSize = 8;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fontsize(), output);
  }

  // optional uint32 fontColor = 9;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fontcolor(), output);
  }

  // optional uint32 fontStyle = 10;
  if (has_fontstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fontstyle(), output);
  }

  // optional string fontName = 11;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->fontname(), output);
  }

  // optional uint32 datatype = 12;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->datatype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgInfo)
}

int MsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional uint32 fromid = 3;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // optional uint32 toid = 4;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

    // optional uint32 send_time = 5;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // optional string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string fromnickname = 7;
    if (has_fromnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromnickname());
    }

    // optional uint32 fontSize = 8;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fontColor = 9;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontcolor());
    }

    // optional uint32 fontStyle = 10;
    if (has_fontstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontstyle());
    }

    // optional string fontName = 11;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional uint32 datatype = 12;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datatype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgInfo*>(&from));
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_fromnickname()) {
      set_fromnickname(from.fromnickname());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fontcolor()) {
      set_fontcolor(from.fontcolor());
    }
    if (from.has_fontstyle()) {
      set_fontstyle(from.fontstyle());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {

  return true;
}

void MsgInfo::Swap(MsgInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(uuid_, other->uuid_);
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(send_time_, other->send_time_);
    std::swap(data_, other->data_);
    std::swap(fromnickname_, other->fromnickname_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(fontstyle_, other->fontstyle_);
    std::swap(fontname_, other->fontname_);
    std::swap(datatype_, other->datatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgInfo::GetTypeName() const {
  return "MsgInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgListReq::kFromidFieldNumber;
const int MsgListReq::kToidFieldNumber;
const int MsgListReq::kBgntimeFieldNumber;
const int MsgListReq::kEndtimeFieldNumber;
const int MsgListReq::kMaxmsgFieldNumber;
const int MsgListReq::kBgnmsgidFieldNumber;
#endif  // !_MSC_VER

MsgListReq::MsgListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgListReq)
}

void MsgListReq::InitAsDefaultInstance() {
}

MsgListReq::MsgListReq(const MsgListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgListReq)
}

void MsgListReq::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = 0u;
  toid_ = 0u;
  bgntime_ = 0u;
  endtime_ = 0u;
  maxmsg_ = 0u;
  bgnmsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgListReq::~MsgListReq() {
  // @@protoc_insertion_point(destructor:MsgListReq)
  SharedDtor();
}

void MsgListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgListReq& MsgListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgListReq* MsgListReq::default_instance_ = NULL;

MsgListReq* MsgListReq::New() const {
  return new MsgListReq;
}

void MsgListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fromid_, bgnmsgid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fromid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_toid;
        break;
      }

      // required uint32 toid = 2;
      case 2: {
        if (tag == 16) {
         parse_toid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bgntime;
        break;
      }

      // required uint32 bgntime = 3;
      case 3: {
        if (tag == 24) {
         parse_bgntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgntime_)));
          set_has_bgntime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxmsg;
        break;
      }

      // optional uint32 maxmsg = 5;
      case 5: {
        if (tag == 40) {
         parse_maxmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmsg_)));
          set_has_maxmsg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bgnmsgid;
        break;
      }

      // optional uint32 bgnmsgid = 6;
      case 6: {
        if (tag == 48) {
         parse_bgnmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgnmsgid_)));
          set_has_bgnmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgListReq)
  return false;
#undef DO_
}

void MsgListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgListReq)
  // required uint32 fromid = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromid(), output);
  }

  // required uint32 toid = 2;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toid(), output);
  }

  // required uint32 bgntime = 3;
  if (has_bgntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bgntime(), output);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // optional uint32 maxmsg = 5;
  if (has_maxmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxmsg(), output);
  }

  // optional uint32 bgnmsgid = 6;
  if (has_bgnmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bgnmsgid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgListReq)
}

int MsgListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fromid = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // required uint32 toid = 2;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

    // required uint32 bgntime = 3;
    if (has_bgntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgntime());
    }

    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 maxmsg = 5;
    if (has_maxmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmsg());
    }

    // optional uint32 bgnmsgid = 6;
    if (has_bgnmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgnmsgid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgListReq*>(&from));
}

void MsgListReq::MergeFrom(const MsgListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_bgntime()) {
      set_bgntime(from.bgntime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_maxmsg()) {
      set_maxmsg(from.maxmsg());
    }
    if (from.has_bgnmsgid()) {
      set_bgnmsgid(from.bgnmsgid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgListReq::CopyFrom(const MsgListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgListReq::Swap(MsgListReq* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(bgntime_, other->bgntime_);
    std::swap(endtime_, other->endtime_);
    std::swap(maxmsg_, other->maxmsg_);
    std::swap(bgnmsgid_, other->bgnmsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgListReq::GetTypeName() const {
  return "MsgListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgList::kRetFieldNumber;
const int MsgList::kIsendFieldNumber;
const int MsgList::kLastmsgidFieldNumber;
const int MsgList::kUseridFieldNumber;
const int MsgList::kMsglistFieldNumber;
#endif  // !_MSC_VER

MsgList::MsgList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgList)
}

void MsgList::InitAsDefaultInstance() {
}

MsgList::MsgList(const MsgList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgList)
}

void MsgList::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  isend_ = 0u;
  lastmsgid_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgList::~MsgList() {
  // @@protoc_insertion_point(destructor:MsgList)
  SharedDtor();
}

void MsgList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgList& MsgList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgList* MsgList::default_instance_ = NULL;

MsgList* MsgList::New() const {
  return new MsgList;
}

void MsgList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ret_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isend;
        break;
      }

      // required uint32 isend = 2;
      case 2: {
        if (tag == 16) {
         parse_isend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastmsgid;
        break;
      }

      // optional uint32 lastmsgid = 3;
      case 3: {
        if (tag == 24) {
         parse_lastmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmsgid_)));
          set_has_lastmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 4;
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_msglist;
        break;
      }

      // repeated .MsgInfo msglist = 15;
      case 15: {
        if (tag == 122) {
         parse_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_msglist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgList)
  return false;
#undef DO_
}

void MsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgList)
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 isend = 2;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isend(), output);
  }

  // optional uint32 lastmsgid = 3;
  if (has_lastmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastmsgid(), output);
  }

  // optional uint32 userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userid(), output);
  }

  // repeated .MsgInfo msglist = 15;
  for (int i = 0; i < this->msglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->msglist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgList)
}

int MsgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 isend = 2;
    if (has_isend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isend());
    }

    // optional uint32 lastmsgid = 3;
    if (has_lastmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmsgid());
    }

    // optional uint32 userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  // repeated .MsgInfo msglist = 15;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgList*>(&from));
}

void MsgList::MergeFrom(const MsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglist_.MergeFrom(from.msglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
    if (from.has_lastmsgid()) {
      set_lastmsgid(from.lastmsgid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgList::CopyFrom(const MsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void MsgList::Swap(MsgList* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(isend_, other->isend_);
    std::swap(lastmsgid_, other->lastmsgid_);
    std::swap(userid_, other->userid_);
    msglist_.Swap(&other->msglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgList::GetTypeName() const {
  return "MsgList";
}


// ===================================================================

#ifndef _MSC_VER
const int UserOfflineIND::kUseridFieldNumber;
#endif  // !_MSC_VER

UserOfflineIND::UserOfflineIND()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserOfflineIND)
}

void UserOfflineIND::InitAsDefaultInstance() {
}

UserOfflineIND::UserOfflineIND(const UserOfflineIND& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserOfflineIND)
}

void UserOfflineIND::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOfflineIND::~UserOfflineIND() {
  // @@protoc_insertion_point(destructor:UserOfflineIND)
  SharedDtor();
}

void UserOfflineIND::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserOfflineIND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserOfflineIND& UserOfflineIND::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

UserOfflineIND* UserOfflineIND::default_instance_ = NULL;

UserOfflineIND* UserOfflineIND::New() const {
  return new UserOfflineIND;
}

void UserOfflineIND::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserOfflineIND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:UserOfflineIND)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserOfflineIND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserOfflineIND)
  return false;
#undef DO_
}

void UserOfflineIND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserOfflineIND)
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:UserOfflineIND)
}

int UserOfflineIND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOfflineIND::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserOfflineIND*>(&from));
}

void UserOfflineIND::MergeFrom(const UserOfflineIND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserOfflineIND::CopyFrom(const UserOfflineIND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOfflineIND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserOfflineIND::Swap(UserOfflineIND* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserOfflineIND::GetTypeName() const {
  return "UserOfflineIND";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
