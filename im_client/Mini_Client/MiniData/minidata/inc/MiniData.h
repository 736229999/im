// ----------------------------------------------------------------
// 文件:MiniData.h
// 版本: 
// 作者: xy
// 日期: 2006-11-24
// ----------------------------------------------------------------
// 版本历史			注释
// ----------------------------------------------------------------
// v0.1				初始版本
// 
// ----------------------------------------------------------------

#pragma once


#include <assert.h>

#ifdef _DLL_EXPORT
#define MINI_API	_declspec(dllexport)
#else
#ifdef MINI_TEST
#define MINI_API	//_declspec(dllimport)
#else
#define MINI_API	//_declspec(dllimport)
#endif
#endif

#define _MINIDATA_BEG	namespace mini_data{
#define _MINIDATA_END	}


//------------------------------------------------------
// 基本变量类型定义
//------------------------------------------------------

typedef unsigned __int64	uint64;
typedef unsigned int		uint32;
typedef unsigned short		uint16;
typedef unsigned char		uint8;
typedef float				float32;
typedef double				float64;
typedef __int64				int64;
typedef int					int32;
typedef short				int16;
typedef char				int8;

_MINIDATA_BEG


// 默认缓冲区大小,不能为0
const uint32 BUF_DATA_DEFAULT_SIZE = 1024*64;

//------------------------------------------------------
// 错误状态
//------------------------------------------------------

enum STATUS{
	OK = 0,					// 操作成功
	FILE_NOT_OPEN = 0xf000,	// 文件尚未打开
	FILE_NOT_EXIST,			// 文件不存在
	FILE_OPEN_FAILED,		// 文件打开失败
	FILE_FORMAT_ERR,		// 文件格式错误
	FILEHEAD_FORMAT_ERR,	// 文件头格式错误
	RECORDINF_FORMAT_ERR,	// 记录信息格式错误
	RECORD_FORMAT_ERR,		// 记录格式错误
	DATA_LEN_NOT_EQUAL,		// 数据长度不匹配
	RECORD_UNKNOWN_VER,		// 无法识别的记录版本
	RECORD_VER_NOT_SUPPORT,	// 不支持当前记录格式
	READ_EOF,				// 读取数据时文件已经结尾
	FILE_EOF,				// 文件已经结束
	DATA_LEN_OVER,			// 数据长度超长
	DATA_VAL_OVER,			// 数据值溢出
	UNKNOWN_VAR_TYPE,		// mini变量有无法识别的变量类型
	SAVE_RECORDINFO_EXIST,	// 记录信息已经存在
	FILE_EXCEPTION,			// 文件操作异常
};


//------------------------------------------------------
// 记录属性类型 
//------------------------------------------------------

enum MINI_VAR_TYPE
{
	MV_INT8 = 1,
	MV_INT16 = 2,
	MV_INT32 = 4,
	MV_INT64 = 8,
	MV_FLOAT32 = 16,
	MV_FLOAT64 = 32,
	MV_DATA = 256,
};


//------------------------------------------------------
// 约束条件
//------------------------------------------------------

struct MINI_RESTRICT
{
	enum TYPE{
		EMPTY = 0,
		VAL_SIGNED,
		VAL_UNSIGNED,
		DATA_LEN,
	}		type;
	
	uint64	val;

};


//------------------------------------------------------
// 变长数据变量结构
//------------------------------------------------------

struct MINI_DATA
{
	uint32		nLen;
	uint8 *		pData;
	uint32		nSpace;
};


//------------------------------------------------------
// Mini数据内部变量类型（变长数据变量）
//------------------------------------------------------

class  CMiniData:public MINI_DATA
{
public:

	CMiniData();
	
	~CMiniData();

	CMiniData(const CMiniData & v);

	explicit CMiniData(const char * sz);

	CMiniData(const uint8 * p,uint32 nLen);

	void operator = (const CMiniData & v);
	
};

//------------------------------------------------------
// 混合变量
//------------------------------------------------------

union MINI_VAR{
	uint8		i8;
	uint16		i16;
	uint32		i32;
	uint64		i64;
	float32		f32;
	float64		f64;
	MINI_DATA	data;
};

//------------------------------------------------------
// 版本映射对
//------------------------------------------------------

struct VER_PAIR
{
	uint32	v1;	// 目的版本
	uint32	v2;	// 源版本
	
	bool operator < (VER_PAIR v) const;

	bool operator == (VER_PAIR v) const;
};

//------------------------------------------------------
// 数据缓冲类，可以无限长度的数据写入	:)
//------------------------------------------------------

struct MINI_API BUF_DATA
{
protected:

	friend class CMiniWriter;

	void operator = (const BUF_DATA & v){};

	BUF_DATA(const BUF_DATA & v){};

public:

	//------------------------------------------------------
	// 构造函数
	// nBufLen 指定缓冲区初始大小
	//------------------------------------------------------
	explicit BUF_DATA(size_t nBufLen = BUF_DATA_DEFAULT_SIZE);

	~BUF_DATA();

public:

	//------------------------------------------------------
	// 清空缓冲数据
	//------------------------------------------------------
	void	Clear();

	//------------------------------------------------------
	// 获得缓冲区中数据的长度
	//------------------------------------------------------
	int		GetDataLen();

	//------------------------------------------------------
	// 获取缓冲区的数据
	// 参数：	pData	/*OUT*/	缓冲区
	//			nBuf	/*IN-OUT*/ 缓冲区大小,返回实际获取大小
	//------------------------------------------------------
	void	GetData(char * pData,size_t & nBuf);

	//------------------------------------------------------
	// 将数据写入缓冲区
	//------------------------------------------------------
	bool	Write(const char * pData,size_t nLen);

	//------------------------------------------------------
	// 缓冲区剩余空间
	//------------------------------------------------------
	int		GetSpace();

	//------------------------------------------------------
	// 写入64位整形到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(uint64 i);

	//------------------------------------------------------
	// 写入32位整形到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(uint32 i);

	//------------------------------------------------------
	// 写入16位整形到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(uint16 i);

	//------------------------------------------------------
	// 写入mini变长数据到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator << (const MINI_DATA & v);

	//------------------------------------------------------
	// 写入8位整形到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(uint8 i);

	//------------------------------------------------------
	// 写入32位浮点数到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(float32 f);

	//------------------------------------------------------
	// 写入64位浮点数到缓冲区
	//------------------------------------------------------
	BUF_DATA & operator <<(float64 f);

	//------------------------------------------------------
	// 写入一字符串到缓冲区
	// 注意:首先会写入4字节字符串长度
	//------------------------------------------------------
	BUF_DATA & operator <<(const char * sz);

	//------------------------------------------------------
	// 设置默认缓冲区大小
	//------------------------------------------------------
	void	SetDefaultBufSize(size_t nSize);

#ifdef _DEBUG
	//------------------------------------------------------
	// 内部缓冲分区的个数
	//------------------------------------------------------
	int		Buffers() const;
#endif

protected:

	//------------------------------------------------------
	// 添加新的空间
	//------------------------------------------------------
	void	IncBuf(int n);

protected:

	static size_t	s_nBufLen;	// 默认缓冲区大小
	char *			m_pData;	// 缓冲区
	char *			m_p;		// 数据结束指针
	size_t			m_nLen;		// 缓冲区长度
	BUF_DATA *		m_pNext;	// 下个缓冲区地址

};

#ifdef _DLL_EXPORT
#include "minidata.inl"
#endif

_MINIDATA_END