// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_improtocol_2eproto() {
  delete XT_HEAD_PB::default_instance_;
  delete DataPacket::default_instance_;
  delete MsgInfo::default_instance_;
  delete MsgListReq::default_instance_;
  delete MsgList::default_instance_;
  delete UserOfflineIND::default_instance_;
  delete Buf_ServerSend::default_instance_;
  delete Buf_ClientSend::default_instance_;
  delete BaseReq::default_instance_;
  delete MsgRemindAck::default_instance_;
  delete CsUpdateOperReq::default_instance_;
  delete OrderGoodsInfo::default_instance_;
  delete NewOrder::default_instance_;
  delete PayOrder::default_instance_;
  delete GoodsComment::default_instance_;
  delete ReturnGoodsInfo::default_instance_;
  delete ReturnOrder::default_instance_;
  delete MsgPushInd::default_instance_;
  delete csTeamInfoReq::default_instance_;
  delete csTeamInfo::default_instance_;
  delete csTeamInfoAck::default_instance_;
  delete csTeamQueueInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_improtocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_improtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_base_2eproto();
  XT_HEAD_PB::default_instance_ = new XT_HEAD_PB();
  DataPacket::default_instance_ = new DataPacket();
  MsgInfo::default_instance_ = new MsgInfo();
  MsgListReq::default_instance_ = new MsgListReq();
  MsgList::default_instance_ = new MsgList();
  UserOfflineIND::default_instance_ = new UserOfflineIND();
  Buf_ServerSend::default_instance_ = new Buf_ServerSend();
  Buf_ClientSend::default_instance_ = new Buf_ClientSend();
  BaseReq::default_instance_ = new BaseReq();
  MsgRemindAck::default_instance_ = new MsgRemindAck();
  CsUpdateOperReq::default_instance_ = new CsUpdateOperReq();
  OrderGoodsInfo::default_instance_ = new OrderGoodsInfo();
  NewOrder::default_instance_ = new NewOrder();
  PayOrder::default_instance_ = new PayOrder();
  GoodsComment::default_instance_ = new GoodsComment();
  ReturnGoodsInfo::default_instance_ = new ReturnGoodsInfo();
  ReturnOrder::default_instance_ = new ReturnOrder();
  MsgPushInd::default_instance_ = new MsgPushInd();
  csTeamInfoReq::default_instance_ = new csTeamInfoReq();
  csTeamInfo::default_instance_ = new csTeamInfo();
  csTeamInfoAck::default_instance_ = new csTeamInfoAck();
  csTeamQueueInfo::default_instance_ = new csTeamQueueInfo();
  XT_HEAD_PB::default_instance_->InitAsDefaultInstance();
  DataPacket::default_instance_->InitAsDefaultInstance();
  MsgInfo::default_instance_->InitAsDefaultInstance();
  MsgListReq::default_instance_->InitAsDefaultInstance();
  MsgList::default_instance_->InitAsDefaultInstance();
  UserOfflineIND::default_instance_->InitAsDefaultInstance();
  Buf_ServerSend::default_instance_->InitAsDefaultInstance();
  Buf_ClientSend::default_instance_->InitAsDefaultInstance();
  BaseReq::default_instance_->InitAsDefaultInstance();
  MsgRemindAck::default_instance_->InitAsDefaultInstance();
  CsUpdateOperReq::default_instance_->InitAsDefaultInstance();
  OrderGoodsInfo::default_instance_->InitAsDefaultInstance();
  NewOrder::default_instance_->InitAsDefaultInstance();
  PayOrder::default_instance_->InitAsDefaultInstance();
  GoodsComment::default_instance_->InitAsDefaultInstance();
  ReturnGoodsInfo::default_instance_->InitAsDefaultInstance();
  ReturnOrder::default_instance_->InitAsDefaultInstance();
  MsgPushInd::default_instance_->InitAsDefaultInstance();
  csTeamInfoReq::default_instance_->InitAsDefaultInstance();
  csTeamInfo::default_instance_->InitAsDefaultInstance();
  csTeamInfoAck::default_instance_->InitAsDefaultInstance();
  csTeamQueueInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improtocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improtocol_2eproto_once_);
void protobuf_AddDesc_improtocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improtocol_2eproto_once_,
                 &protobuf_AddDesc_improtocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improtocol_2eproto {
  StaticDescriptorInitializer_improtocol_2eproto() {
    protobuf_AddDesc_improtocol_2eproto();
  }
} static_descriptor_initializer_improtocol_2eproto_;
#endif
bool EN_BUFLOCATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool REMIND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool CS_UPDATE_OPER_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool XT_HEAD_PB_EN_FLAG_IsValid(int value) {
  switch(value) {
    case 240:
    case 241:
    case 242:
    case 243:
    case 253:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::FLAG_SRVACTION;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::FLAG_SRVACK;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::FLAG_CNTREQUEST;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::FLAG_CNTACK;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::FLAG_SELLCNTREQ;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::EN_FLAG_MIN;
const XT_HEAD_PB_EN_FLAG XT_HEAD_PB::EN_FLAG_MAX;
const int XT_HEAD_PB::EN_FLAG_ARRAYSIZE;
#endif  // _MSC_VER
bool XT_HEAD_PB_EN_FROM_IsValid(int value) {
  switch(value) {
    case 256:
    case 512:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XT_HEAD_PB_EN_FROM XT_HEAD_PB::FROM_SERVER;
const XT_HEAD_PB_EN_FROM XT_HEAD_PB::FROM_CLIENT;
const XT_HEAD_PB_EN_FROM XT_HEAD_PB::FROM_TRANSFER;
const XT_HEAD_PB_EN_FROM XT_HEAD_PB::EN_FROM_MIN;
const XT_HEAD_PB_EN_FROM XT_HEAD_PB::EN_FROM_MAX;
const int XT_HEAD_PB::EN_FROM_ARRAYSIZE;
#endif  // _MSC_VER
bool XT_HEAD_PB_EN_SID_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XT_HEAD_PB_EN_SID XT_HEAD_PB::SID_SERVER;
const XT_HEAD_PB_EN_SID XT_HEAD_PB::EN_SID_MIN;
const XT_HEAD_PB_EN_SID XT_HEAD_PB::EN_SID_MAX;
const int XT_HEAD_PB::EN_SID_ARRAYSIZE;
#endif  // _MSC_VER
bool XT_HEAD_PB_EN_DSET_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::DEST_TYPE_SERVER;
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::DEST_TYPE_USER;
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::DEST_TYPE_FAMILY;
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::DEST_TYPE_TRANSMIT;
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::EN_DSET_TYPE_MIN;
const XT_HEAD_PB_EN_DSET_TYPE XT_HEAD_PB::EN_DSET_TYPE_MAX;
const int XT_HEAD_PB::EN_DSET_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int XT_HEAD_PB::kFlagFieldNumber;
const int XT_HEAD_PB::kFromFieldNumber;
const int XT_HEAD_PB::kCmdFieldNumber;
const int XT_HEAD_PB::kSeqFieldNumber;
const int XT_HEAD_PB::kSidFieldNumber;
const int XT_HEAD_PB::kDtypeFieldNumber;
const int XT_HEAD_PB::kDidFieldNumber;
#endif  // !_MSC_VER

XT_HEAD_PB::XT_HEAD_PB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XT_HEAD_PB)
}

void XT_HEAD_PB::InitAsDefaultInstance() {
}

XT_HEAD_PB::XT_HEAD_PB(const XT_HEAD_PB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:XT_HEAD_PB)
}

void XT_HEAD_PB::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  from_ = 0;
  cmd_ = 0;
  seq_ = 0;
  sid_ = 0;
  dtype_ = 0;
  did_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XT_HEAD_PB::~XT_HEAD_PB() {
  // @@protoc_insertion_point(destructor:XT_HEAD_PB)
  SharedDtor();
}

void XT_HEAD_PB::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XT_HEAD_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XT_HEAD_PB& XT_HEAD_PB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

XT_HEAD_PB* XT_HEAD_PB::default_instance_ = NULL;

XT_HEAD_PB* XT_HEAD_PB::New() const {
  return new XT_HEAD_PB;
}

void XT_HEAD_PB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<XT_HEAD_PB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(flag_, did_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool XT_HEAD_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:XT_HEAD_PB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }

      // optional int32 from = 2;
      case 2: {
        if (tag == 16) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // optional int32 cmd = 3;
      case 3: {
        if (tag == 24) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional int32 seq = 4;
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sid;
        break;
      }

      // optional int32 sid = 5;
      case 5: {
        if (tag == 40) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dtype;
        break;
      }

      // optional int32 dtype = 6;
      case 6: {
        if (tag == 48) {
         parse_dtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtype_)));
          set_has_dtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_did;
        break;
      }

      // optional int32 did = 7;
      case 7: {
        if (tag == 56) {
         parse_did:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &did_)));
          set_has_did();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XT_HEAD_PB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XT_HEAD_PB)
  return false;
#undef DO_
}

void XT_HEAD_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XT_HEAD_PB)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }

  // optional int32 cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd(), output);
  }

  // optional int32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seq(), output);
  }

  // optional int32 sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sid(), output);
  }

  // optional int32 dtype = 6;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dtype(), output);
  }

  // optional int32 did = 7;
  if (has_did()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->did(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:XT_HEAD_PB)
}

int XT_HEAD_PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // optional int32 sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 dtype = 6;
    if (has_dtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtype());
    }

    // optional int32 did = 7;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->did());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XT_HEAD_PB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XT_HEAD_PB*>(&from));
}

void XT_HEAD_PB::MergeFrom(const XT_HEAD_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_dtype()) {
      set_dtype(from.dtype());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void XT_HEAD_PB::CopyFrom(const XT_HEAD_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XT_HEAD_PB::IsInitialized() const {

  return true;
}

void XT_HEAD_PB::Swap(XT_HEAD_PB* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(from_, other->from_);
    std::swap(cmd_, other->cmd_);
    std::swap(seq_, other->seq_);
    std::swap(sid_, other->sid_);
    std::swap(dtype_, other->dtype_);
    std::swap(did_, other->did_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XT_HEAD_PB::GetTypeName() const {
  return "XT_HEAD_PB";
}


// ===================================================================

#ifndef _MSC_VER
const int DataPacket::kHeadFieldNumber;
const int DataPacket::kDataFieldNumber;
#endif  // !_MSC_VER

DataPacket::DataPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataPacket)
}

void DataPacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::XT_HEAD_PB*>(
      ::XT_HEAD_PB::internal_default_instance());
#else
  head_ = const_cast< ::XT_HEAD_PB*>(&::XT_HEAD_PB::default_instance());
#endif
}

DataPacket::DataPacket(const DataPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataPacket)
}

void DataPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:DataPacket)
  SharedDtor();
}

void DataPacket::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void DataPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataPacket& DataPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

DataPacket* DataPacket::default_instance_ = NULL;

DataPacket* DataPacket::New() const {
  return new DataPacket;
}

void DataPacket::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_head()) {
      if (head_ != NULL) head_->::XT_HEAD_PB::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DataPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .XT_HEAD_PB head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataPacket)
  return false;
#undef DO_
}

void DataPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataPacket)
  // required .XT_HEAD_PB head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->head(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DataPacket)
}

int DataPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .XT_HEAD_PB head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataPacket*>(&from));
}

void DataPacket::MergeFrom(const DataPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::XT_HEAD_PB::MergeFrom(from.head());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataPacket::CopyFrom(const DataPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataPacket::Swap(DataPacket* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataPacket::GetTypeName() const {
  return "DataPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInfo::kMsgidFieldNumber;
const int MsgInfo::kUuidFieldNumber;
const int MsgInfo::kFromidFieldNumber;
const int MsgInfo::kToidFieldNumber;
const int MsgInfo::kSendTimeFieldNumber;
const int MsgInfo::kDataFieldNumber;
const int MsgInfo::kFromnicknameFieldNumber;
const int MsgInfo::kFontSizeFieldNumber;
const int MsgInfo::kFontColorFieldNumber;
const int MsgInfo::kFontStyleFieldNumber;
const int MsgInfo::kFontNameFieldNumber;
const int MsgInfo::kDatatypeFieldNumber;
#endif  // !_MSC_VER

MsgInfo::MsgInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgInfo)
}

void MsgInfo::InitAsDefaultInstance() {
}

MsgInfo::MsgInfo(const MsgInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgInfo)
}

void MsgInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromid_ = 0u;
  toid_ = 0u;
  send_time_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontsize_ = 0u;
  fontcolor_ = 0u;
  fontstyle_ = 0u;
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:MsgInfo)
  SharedDtor();
}

void MsgInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (fromnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromnickname_;
  }
  if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgInfo& MsgInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgInfo* MsgInfo::default_instance_ = NULL;

MsgInfo* MsgInfo::New() const {
  return new MsgInfo;
}

void MsgInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msgid_, send_time_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_fromnickname()) {
      if (fromnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromnickname_->clear();
      }
    }
    fontsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(fontstyle_, datatype_);
    fontcolor_ = 0u;
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fontname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fromid;
        break;
      }

      // optional uint32 fromid = 3;
      case 3: {
        if (tag == 24) {
         parse_fromid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_toid;
        break;
      }

      // optional uint32 toid = 4;
      case 4: {
        if (tag == 32) {
         parse_toid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 5;
      case 5: {
        if (tag == 40) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional string data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fromnickname;
        break;
      }

      // optional string fromnickname = 7;
      case 7: {
        if (tag == 58) {
         parse_fromnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fontSize;
        break;
      }

      // optional uint32 fontSize = 8;
      case 8: {
        if (tag == 64) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fontColor;
        break;
      }

      // optional uint32 fontColor = 9;
      case 9: {
        if (tag == 72) {
         parse_fontColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontcolor_)));
          set_has_fontcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fontStyle;
        break;
      }

      // optional uint32 fontStyle = 10;
      case 10: {
        if (tag == 80) {
         parse_fontStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontstyle_)));
          set_has_fontstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fontName;
        break;
      }

      // optional string fontName = 11;
      case 11: {
        if (tag == 90) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_datatype;
        break;
      }

      // optional uint32 datatype = 12;
      case 12: {
        if (tag == 96) {
         parse_datatype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgInfo)
  return false;
#undef DO_
}

void MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgInfo)
  // optional uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint32 fromid = 3;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fromid(), output);
  }

  // optional uint32 toid = 4;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->toid(), output);
  }

  // optional uint32 send_time = 5;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->send_time(), output);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  // optional string fromnickname = 7;
  if (has_fromnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fromnickname(), output);
  }

  // optional uint32 fontSize = 8;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fontsize(), output);
  }

  // optional uint32 fontColor = 9;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fontcolor(), output);
  }

  // optional uint32 fontStyle = 10;
  if (has_fontstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fontstyle(), output);
  }

  // optional string fontName = 11;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->fontname(), output);
  }

  // optional uint32 datatype = 12;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->datatype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgInfo)
}

int MsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional uint32 fromid = 3;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // optional uint32 toid = 4;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

    // optional uint32 send_time = 5;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // optional string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string fromnickname = 7;
    if (has_fromnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromnickname());
    }

    // optional uint32 fontSize = 8;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fontColor = 9;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontcolor());
    }

    // optional uint32 fontStyle = 10;
    if (has_fontstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontstyle());
    }

    // optional string fontName = 11;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional uint32 datatype = 12;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datatype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgInfo*>(&from));
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_fromnickname()) {
      set_fromnickname(from.fromnickname());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fontcolor()) {
      set_fontcolor(from.fontcolor());
    }
    if (from.has_fontstyle()) {
      set_fontstyle(from.fontstyle());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {

  return true;
}

void MsgInfo::Swap(MsgInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(uuid_, other->uuid_);
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(send_time_, other->send_time_);
    std::swap(data_, other->data_);
    std::swap(fromnickname_, other->fromnickname_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(fontstyle_, other->fontstyle_);
    std::swap(fontname_, other->fontname_);
    std::swap(datatype_, other->datatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgInfo::GetTypeName() const {
  return "MsgInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgListReq::kFromidFieldNumber;
const int MsgListReq::kToidFieldNumber;
const int MsgListReq::kBgntimeFieldNumber;
const int MsgListReq::kEndtimeFieldNumber;
const int MsgListReq::kMaxmsgFieldNumber;
const int MsgListReq::kBgnmsgidFieldNumber;
#endif  // !_MSC_VER

MsgListReq::MsgListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgListReq)
}

void MsgListReq::InitAsDefaultInstance() {
}

MsgListReq::MsgListReq(const MsgListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgListReq)
}

void MsgListReq::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = 0u;
  toid_ = 0u;
  bgntime_ = 0u;
  endtime_ = 0u;
  maxmsg_ = 0u;
  bgnmsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgListReq::~MsgListReq() {
  // @@protoc_insertion_point(destructor:MsgListReq)
  SharedDtor();
}

void MsgListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgListReq& MsgListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgListReq* MsgListReq::default_instance_ = NULL;

MsgListReq* MsgListReq::New() const {
  return new MsgListReq;
}

void MsgListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fromid_, bgnmsgid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fromid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_toid;
        break;
      }

      // required uint32 toid = 2;
      case 2: {
        if (tag == 16) {
         parse_toid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bgntime;
        break;
      }

      // required uint32 bgntime = 3;
      case 3: {
        if (tag == 24) {
         parse_bgntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgntime_)));
          set_has_bgntime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxmsg;
        break;
      }

      // optional uint32 maxmsg = 5;
      case 5: {
        if (tag == 40) {
         parse_maxmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmsg_)));
          set_has_maxmsg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bgnmsgid;
        break;
      }

      // optional uint32 bgnmsgid = 6;
      case 6: {
        if (tag == 48) {
         parse_bgnmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgnmsgid_)));
          set_has_bgnmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgListReq)
  return false;
#undef DO_
}

void MsgListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgListReq)
  // required uint32 fromid = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromid(), output);
  }

  // required uint32 toid = 2;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toid(), output);
  }

  // required uint32 bgntime = 3;
  if (has_bgntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bgntime(), output);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // optional uint32 maxmsg = 5;
  if (has_maxmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxmsg(), output);
  }

  // optional uint32 bgnmsgid = 6;
  if (has_bgnmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bgnmsgid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgListReq)
}

int MsgListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fromid = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // required uint32 toid = 2;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

    // required uint32 bgntime = 3;
    if (has_bgntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgntime());
    }

    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 maxmsg = 5;
    if (has_maxmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmsg());
    }

    // optional uint32 bgnmsgid = 6;
    if (has_bgnmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgnmsgid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgListReq*>(&from));
}

void MsgListReq::MergeFrom(const MsgListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_bgntime()) {
      set_bgntime(from.bgntime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_maxmsg()) {
      set_maxmsg(from.maxmsg());
    }
    if (from.has_bgnmsgid()) {
      set_bgnmsgid(from.bgnmsgid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgListReq::CopyFrom(const MsgListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgListReq::Swap(MsgListReq* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(bgntime_, other->bgntime_);
    std::swap(endtime_, other->endtime_);
    std::swap(maxmsg_, other->maxmsg_);
    std::swap(bgnmsgid_, other->bgnmsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgListReq::GetTypeName() const {
  return "MsgListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgList::kRetFieldNumber;
const int MsgList::kIsendFieldNumber;
const int MsgList::kLastmsgidFieldNumber;
const int MsgList::kUseridFieldNumber;
const int MsgList::kMsglistFieldNumber;
#endif  // !_MSC_VER

MsgList::MsgList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgList)
}

void MsgList::InitAsDefaultInstance() {
}

MsgList::MsgList(const MsgList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgList)
}

void MsgList::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  isend_ = 0u;
  lastmsgid_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgList::~MsgList() {
  // @@protoc_insertion_point(destructor:MsgList)
  SharedDtor();
}

void MsgList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgList& MsgList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgList* MsgList::default_instance_ = NULL;

MsgList* MsgList::New() const {
  return new MsgList;
}

void MsgList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ret_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isend;
        break;
      }

      // required uint32 isend = 2;
      case 2: {
        if (tag == 16) {
         parse_isend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastmsgid;
        break;
      }

      // optional uint32 lastmsgid = 3;
      case 3: {
        if (tag == 24) {
         parse_lastmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmsgid_)));
          set_has_lastmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 4;
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_msglist;
        break;
      }

      // repeated .MsgInfo msglist = 15;
      case 15: {
        if (tag == 122) {
         parse_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_msglist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgList)
  return false;
#undef DO_
}

void MsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgList)
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 isend = 2;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isend(), output);
  }

  // optional uint32 lastmsgid = 3;
  if (has_lastmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastmsgid(), output);
  }

  // optional uint32 userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userid(), output);
  }

  // repeated .MsgInfo msglist = 15;
  for (int i = 0; i < this->msglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->msglist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgList)
}

int MsgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 isend = 2;
    if (has_isend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isend());
    }

    // optional uint32 lastmsgid = 3;
    if (has_lastmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmsgid());
    }

    // optional uint32 userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  // repeated .MsgInfo msglist = 15;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgList*>(&from));
}

void MsgList::MergeFrom(const MsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglist_.MergeFrom(from.msglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
    if (from.has_lastmsgid()) {
      set_lastmsgid(from.lastmsgid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgList::CopyFrom(const MsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void MsgList::Swap(MsgList* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(isend_, other->isend_);
    std::swap(lastmsgid_, other->lastmsgid_);
    std::swap(userid_, other->userid_);
    msglist_.Swap(&other->msglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgList::GetTypeName() const {
  return "MsgList";
}


// ===================================================================

#ifndef _MSC_VER
const int UserOfflineIND::kUseridFieldNumber;
#endif  // !_MSC_VER

UserOfflineIND::UserOfflineIND()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserOfflineIND)
}

void UserOfflineIND::InitAsDefaultInstance() {
}

UserOfflineIND::UserOfflineIND(const UserOfflineIND& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserOfflineIND)
}

void UserOfflineIND::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOfflineIND::~UserOfflineIND() {
  // @@protoc_insertion_point(destructor:UserOfflineIND)
  SharedDtor();
}

void UserOfflineIND::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserOfflineIND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserOfflineIND& UserOfflineIND::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

UserOfflineIND* UserOfflineIND::default_instance_ = NULL;

UserOfflineIND* UserOfflineIND::New() const {
  return new UserOfflineIND;
}

void UserOfflineIND::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserOfflineIND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:UserOfflineIND)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserOfflineIND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserOfflineIND)
  return false;
#undef DO_
}

void UserOfflineIND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserOfflineIND)
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:UserOfflineIND)
}

int UserOfflineIND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOfflineIND::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserOfflineIND*>(&from));
}

void UserOfflineIND::MergeFrom(const UserOfflineIND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserOfflineIND::CopyFrom(const UserOfflineIND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOfflineIND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserOfflineIND::Swap(UserOfflineIND* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserOfflineIND::GetTypeName() const {
  return "UserOfflineIND";
}


// ===================================================================

#ifndef _MSC_VER
const int Buf_ServerSend::kPacketCountFieldNumber;
const int Buf_ServerSend::kIdxPacketFieldNumber;
const int Buf_ServerSend::kBufUnitIdxFieldNumber;
const int Buf_ServerSend::kBuflocationFieldNumber;
const int Buf_ServerSend::kPacketDataFieldNumber;
#endif  // !_MSC_VER

Buf_ServerSend::Buf_ServerSend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Buf_ServerSend)
}

void Buf_ServerSend::InitAsDefaultInstance() {
}

Buf_ServerSend::Buf_ServerSend(const Buf_ServerSend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Buf_ServerSend)
}

void Buf_ServerSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packetcount_ = 0u;
  idxpacket_ = 0u;
  bufunitidx_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buflocation_ = 0;
  packetdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Buf_ServerSend::~Buf_ServerSend() {
  // @@protoc_insertion_point(destructor:Buf_ServerSend)
  SharedDtor();
}

void Buf_ServerSend::SharedDtor() {
  if (bufunitidx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bufunitidx_;
  }
  if (packetdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetdata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Buf_ServerSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Buf_ServerSend& Buf_ServerSend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

Buf_ServerSend* Buf_ServerSend::default_instance_ = NULL;

Buf_ServerSend* Buf_ServerSend::New() const {
  return new Buf_ServerSend;
}

void Buf_ServerSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Buf_ServerSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(packetcount_, idxpacket_);
    if (has_bufunitidx()) {
      if (bufunitidx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bufunitidx_->clear();
      }
    }
    buflocation_ = 0;
    if (has_packetdata()) {
      if (packetdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packetdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Buf_ServerSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Buf_ServerSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 packetCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetcount_)));
          set_has_packetcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idxPacket;
        break;
      }

      // required uint32 idxPacket = 2;
      case 2: {
        if (tag == 16) {
         parse_idxPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idxpacket_)));
          set_has_idxpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bufUnitIdx;
        break;
      }

      // required string bufUnitIdx = 3;
      case 3: {
        if (tag == 26) {
         parse_bufUnitIdx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bufunitidx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buflocation;
        break;
      }

      // required .EN_BUFLOCATION buflocation = 4;
      case 4: {
        if (tag == 32) {
         parse_buflocation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EN_BUFLOCATION_IsValid(value)) {
            set_buflocation(static_cast< ::EN_BUFLOCATION >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_packetData;
        break;
      }

      // required bytes packetData = 5;
      case 5: {
        if (tag == 42) {
         parse_packetData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packetdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Buf_ServerSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Buf_ServerSend)
  return false;
#undef DO_
}

void Buf_ServerSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Buf_ServerSend)
  // required uint32 packetCount = 1;
  if (has_packetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packetcount(), output);
  }

  // required uint32 idxPacket = 2;
  if (has_idxpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idxpacket(), output);
  }

  // required string bufUnitIdx = 3;
  if (has_bufunitidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bufunitidx(), output);
  }

  // required .EN_BUFLOCATION buflocation = 4;
  if (has_buflocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->buflocation(), output);
  }

  // required bytes packetData = 5;
  if (has_packetdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->packetdata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Buf_ServerSend)
}

int Buf_ServerSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 packetCount = 1;
    if (has_packetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packetcount());
    }

    // required uint32 idxPacket = 2;
    if (has_idxpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idxpacket());
    }

    // required string bufUnitIdx = 3;
    if (has_bufunitidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bufunitidx());
    }

    // required .EN_BUFLOCATION buflocation = 4;
    if (has_buflocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buflocation());
    }

    // required bytes packetData = 5;
    if (has_packetdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packetdata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buf_ServerSend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Buf_ServerSend*>(&from));
}

void Buf_ServerSend::MergeFrom(const Buf_ServerSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetcount()) {
      set_packetcount(from.packetcount());
    }
    if (from.has_idxpacket()) {
      set_idxpacket(from.idxpacket());
    }
    if (from.has_bufunitidx()) {
      set_bufunitidx(from.bufunitidx());
    }
    if (from.has_buflocation()) {
      set_buflocation(from.buflocation());
    }
    if (from.has_packetdata()) {
      set_packetdata(from.packetdata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Buf_ServerSend::CopyFrom(const Buf_ServerSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buf_ServerSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Buf_ServerSend::Swap(Buf_ServerSend* other) {
  if (other != this) {
    std::swap(packetcount_, other->packetcount_);
    std::swap(idxpacket_, other->idxpacket_);
    std::swap(bufunitidx_, other->bufunitidx_);
    std::swap(buflocation_, other->buflocation_);
    std::swap(packetdata_, other->packetdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Buf_ServerSend::GetTypeName() const {
  return "Buf_ServerSend";
}


// ===================================================================

#ifndef _MSC_VER
const int Buf_ClientSend::kIdxPacketReqFieldNumber;
const int Buf_ClientSend::kBufUnitIdxFieldNumber;
const int Buf_ClientSend::kBuflocationFieldNumber;
#endif  // !_MSC_VER

Buf_ClientSend::Buf_ClientSend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Buf_ClientSend)
}

void Buf_ClientSend::InitAsDefaultInstance() {
}

Buf_ClientSend::Buf_ClientSend(const Buf_ClientSend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Buf_ClientSend)
}

void Buf_ClientSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idxpacketreq_ = 0u;
  bufunitidx_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buflocation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Buf_ClientSend::~Buf_ClientSend() {
  // @@protoc_insertion_point(destructor:Buf_ClientSend)
  SharedDtor();
}

void Buf_ClientSend::SharedDtor() {
  if (bufunitidx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bufunitidx_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Buf_ClientSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Buf_ClientSend& Buf_ClientSend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

Buf_ClientSend* Buf_ClientSend::default_instance_ = NULL;

Buf_ClientSend* Buf_ClientSend::New() const {
  return new Buf_ClientSend;
}

void Buf_ClientSend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Buf_ClientSend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(idxpacketreq_, buflocation_);
    if (has_bufunitidx()) {
      if (bufunitidx_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bufunitidx_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Buf_ClientSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Buf_ClientSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idxPacketReq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idxpacketreq_)));
          set_has_idxpacketreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bufUnitIdx;
        break;
      }

      // required string bufUnitIdx = 2;
      case 2: {
        if (tag == 18) {
         parse_bufUnitIdx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bufunitidx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buflocation;
        break;
      }

      // required .EN_BUFLOCATION buflocation = 3;
      case 3: {
        if (tag == 24) {
         parse_buflocation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EN_BUFLOCATION_IsValid(value)) {
            set_buflocation(static_cast< ::EN_BUFLOCATION >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Buf_ClientSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Buf_ClientSend)
  return false;
#undef DO_
}

void Buf_ClientSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Buf_ClientSend)
  // required uint32 idxPacketReq = 1;
  if (has_idxpacketreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idxpacketreq(), output);
  }

  // required string bufUnitIdx = 2;
  if (has_bufunitidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bufunitidx(), output);
  }

  // required .EN_BUFLOCATION buflocation = 3;
  if (has_buflocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->buflocation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Buf_ClientSend)
}

int Buf_ClientSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idxPacketReq = 1;
    if (has_idxpacketreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idxpacketreq());
    }

    // required string bufUnitIdx = 2;
    if (has_bufunitidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bufunitidx());
    }

    // required .EN_BUFLOCATION buflocation = 3;
    if (has_buflocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buflocation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buf_ClientSend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Buf_ClientSend*>(&from));
}

void Buf_ClientSend::MergeFrom(const Buf_ClientSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idxpacketreq()) {
      set_idxpacketreq(from.idxpacketreq());
    }
    if (from.has_bufunitidx()) {
      set_bufunitidx(from.bufunitidx());
    }
    if (from.has_buflocation()) {
      set_buflocation(from.buflocation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Buf_ClientSend::CopyFrom(const Buf_ClientSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buf_ClientSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Buf_ClientSend::Swap(Buf_ClientSend* other) {
  if (other != this) {
    std::swap(idxpacketreq_, other->idxpacketreq_);
    std::swap(bufunitidx_, other->bufunitidx_);
    std::swap(buflocation_, other->buflocation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Buf_ClientSend::GetTypeName() const {
  return "Buf_ClientSend";
}


// ===================================================================

#ifndef _MSC_VER
const int BaseReq::kUseridFieldNumber;
#endif  // !_MSC_VER

BaseReq::BaseReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseReq)
}

void BaseReq::InitAsDefaultInstance() {
}

BaseReq::BaseReq(const BaseReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BaseReq)
}

void BaseReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseReq::~BaseReq() {
  // @@protoc_insertion_point(destructor:BaseReq)
  SharedDtor();
}

void BaseReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BaseReq& BaseReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

BaseReq* BaseReq::default_instance_ = NULL;

BaseReq* BaseReq::New() const {
  return new BaseReq;
}

void BaseReq::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:BaseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BaseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BaseReq)
  return false;
#undef DO_
}

void BaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BaseReq)
  // required uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:BaseReq)
}

int BaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BaseReq*>(&from));
}

void BaseReq::MergeFrom(const BaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BaseReq::CopyFrom(const BaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BaseReq::Swap(BaseReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BaseReq::GetTypeName() const {
  return "BaseReq";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRemindAck::kNeworderFieldNumber;
const int MsgRemindAck::kPayorderFieldNumber;
const int MsgRemindAck::kGoodscommentFieldNumber;
const int MsgRemindAck::kReturnorderFieldNumber;
#endif  // !_MSC_VER

MsgRemindAck::MsgRemindAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRemindAck)
}

void MsgRemindAck::InitAsDefaultInstance() {
}

MsgRemindAck::MsgRemindAck(const MsgRemindAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRemindAck)
}

void MsgRemindAck::SharedCtor() {
  _cached_size_ = 0;
  neworder_ = 1;
  payorder_ = 1;
  goodscomment_ = 1;
  returnorder_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRemindAck::~MsgRemindAck() {
  // @@protoc_insertion_point(destructor:MsgRemindAck)
  SharedDtor();
}

void MsgRemindAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgRemindAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgRemindAck& MsgRemindAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgRemindAck* MsgRemindAck::default_instance_ = NULL;

MsgRemindAck* MsgRemindAck::New() const {
  return new MsgRemindAck;
}

void MsgRemindAck::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    neworder_ = 1;
    payorder_ = 1;
    goodscomment_ = 1;
    returnorder_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgRemindAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgRemindAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .REMIND_TYPE neworder = 1 [default = RT_RECEIVE_AND_POPMSG];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::REMIND_TYPE_IsValid(value)) {
            set_neworder(static_cast< ::REMIND_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payorder;
        break;
      }

      // optional .REMIND_TYPE payorder = 2 [default = RT_RECEIVE_AND_POPMSG];
      case 2: {
        if (tag == 16) {
         parse_payorder:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::REMIND_TYPE_IsValid(value)) {
            set_payorder(static_cast< ::REMIND_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goodscomment;
        break;
      }

      // optional .REMIND_TYPE goodscomment = 3 [default = RT_RECEIVE_AND_POPMSG];
      case 3: {
        if (tag == 24) {
         parse_goodscomment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::REMIND_TYPE_IsValid(value)) {
            set_goodscomment(static_cast< ::REMIND_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_returnorder;
        break;
      }

      // optional .REMIND_TYPE returnorder = 4 [default = RT_RECEIVE_AND_POPMSG];
      case 4: {
        if (tag == 32) {
         parse_returnorder:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::REMIND_TYPE_IsValid(value)) {
            set_returnorder(static_cast< ::REMIND_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRemindAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRemindAck)
  return false;
#undef DO_
}

void MsgRemindAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRemindAck)
  // optional .REMIND_TYPE neworder = 1 [default = RT_RECEIVE_AND_POPMSG];
  if (has_neworder()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->neworder(), output);
  }

  // optional .REMIND_TYPE payorder = 2 [default = RT_RECEIVE_AND_POPMSG];
  if (has_payorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->payorder(), output);
  }

  // optional .REMIND_TYPE goodscomment = 3 [default = RT_RECEIVE_AND_POPMSG];
  if (has_goodscomment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->goodscomment(), output);
  }

  // optional .REMIND_TYPE returnorder = 4 [default = RT_RECEIVE_AND_POPMSG];
  if (has_returnorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->returnorder(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgRemindAck)
}

int MsgRemindAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .REMIND_TYPE neworder = 1 [default = RT_RECEIVE_AND_POPMSG];
    if (has_neworder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->neworder());
    }

    // optional .REMIND_TYPE payorder = 2 [default = RT_RECEIVE_AND_POPMSG];
    if (has_payorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->payorder());
    }

    // optional .REMIND_TYPE goodscomment = 3 [default = RT_RECEIVE_AND_POPMSG];
    if (has_goodscomment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->goodscomment());
    }

    // optional .REMIND_TYPE returnorder = 4 [default = RT_RECEIVE_AND_POPMSG];
    if (has_returnorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->returnorder());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRemindAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgRemindAck*>(&from));
}

void MsgRemindAck::MergeFrom(const MsgRemindAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_neworder()) {
      set_neworder(from.neworder());
    }
    if (from.has_payorder()) {
      set_payorder(from.payorder());
    }
    if (from.has_goodscomment()) {
      set_goodscomment(from.goodscomment());
    }
    if (from.has_returnorder()) {
      set_returnorder(from.returnorder());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgRemindAck::CopyFrom(const MsgRemindAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRemindAck::IsInitialized() const {

  return true;
}

void MsgRemindAck::Swap(MsgRemindAck* other) {
  if (other != this) {
    std::swap(neworder_, other->neworder_);
    std::swap(payorder_, other->payorder_);
    std::swap(goodscomment_, other->goodscomment_);
    std::swap(returnorder_, other->returnorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgRemindAck::GetTypeName() const {
  return "MsgRemindAck";
}


// ===================================================================

#ifndef _MSC_VER
const int CsUpdateOperReq::kUpdateoperFieldNumber;
const int CsUpdateOperReq::kCsidFieldNumber;
const int CsUpdateOperReq::kCustidFieldNumber;
#endif  // !_MSC_VER

CsUpdateOperReq::CsUpdateOperReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CsUpdateOperReq)
}

void CsUpdateOperReq::InitAsDefaultInstance() {
}

CsUpdateOperReq::CsUpdateOperReq(const CsUpdateOperReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CsUpdateOperReq)
}

void CsUpdateOperReq::SharedCtor() {
  _cached_size_ = 0;
  updateoper_ = 1;
  csid_ = 0u;
  custid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CsUpdateOperReq::~CsUpdateOperReq() {
  // @@protoc_insertion_point(destructor:CsUpdateOperReq)
  SharedDtor();
}

void CsUpdateOperReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CsUpdateOperReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CsUpdateOperReq& CsUpdateOperReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

CsUpdateOperReq* CsUpdateOperReq::default_instance_ = NULL;

CsUpdateOperReq* CsUpdateOperReq::New() const {
  return new CsUpdateOperReq;
}

void CsUpdateOperReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CsUpdateOperReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(csid_, custid_);
    updateoper_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CsUpdateOperReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:CsUpdateOperReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CS_UPDATE_OPER updateoper = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CS_UPDATE_OPER_IsValid(value)) {
            set_updateoper(static_cast< ::CS_UPDATE_OPER >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_csid;
        break;
      }

      // required uint32 csid = 2;
      case 2: {
        if (tag == 16) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_custid;
        break;
      }

      // required uint32 custid = 3;
      case 3: {
        if (tag == 24) {
         parse_custid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custid_)));
          set_has_custid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CsUpdateOperReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CsUpdateOperReq)
  return false;
#undef DO_
}

void CsUpdateOperReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CsUpdateOperReq)
  // required .CS_UPDATE_OPER updateoper = 1;
  if (has_updateoper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->updateoper(), output);
  }

  // required uint32 csid = 2;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->csid(), output);
  }

  // required uint32 custid = 3;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->custid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:CsUpdateOperReq)
}

int CsUpdateOperReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CS_UPDATE_OPER updateoper = 1;
    if (has_updateoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updateoper());
    }

    // required uint32 csid = 2;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->csid());
    }

    // required uint32 custid = 3;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CsUpdateOperReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CsUpdateOperReq*>(&from));
}

void CsUpdateOperReq::MergeFrom(const CsUpdateOperReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updateoper()) {
      set_updateoper(from.updateoper());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
    if (from.has_custid()) {
      set_custid(from.custid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CsUpdateOperReq::CopyFrom(const CsUpdateOperReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsUpdateOperReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CsUpdateOperReq::Swap(CsUpdateOperReq* other) {
  if (other != this) {
    std::swap(updateoper_, other->updateoper_);
    std::swap(csid_, other->csid_);
    std::swap(custid_, other->custid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CsUpdateOperReq::GetTypeName() const {
  return "CsUpdateOperReq";
}


// ===================================================================

#ifndef _MSC_VER
const int OrderGoodsInfo::kItnoFieldNumber;
const int OrderGoodsInfo::kProductNameFieldNumber;
const int OrderGoodsInfo::kSourceUrlFieldNumber;
const int OrderGoodsInfo::kPicUrlFieldNumber;
const int OrderGoodsInfo::kQtyFieldNumber;
const int OrderGoodsInfo::kIsMallFieldNumber;
const int OrderGoodsInfo::kSkuIdFieldNumber;
const int OrderGoodsInfo::kPriceFieldNumber;
const int OrderGoodsInfo::kSubTotalPriceFieldNumber;
const int OrderGoodsInfo::kCouponsFieldNumber;
const int OrderGoodsInfo::kVoucherFieldNumber;
const int OrderGoodsInfo::kShoppingCashFieldNumber;
const int OrderGoodsInfo::kShoppingCardFieldNumber;
const int OrderGoodsInfo::kPointsPriceFieldNumber;
const int OrderGoodsInfo::kPromoteFieldNumber;
const int OrderGoodsInfo::kShippingTaxFieldNumber;
const int OrderGoodsInfo::kFreightNumberFieldNumber;
const int OrderGoodsInfo::kKindFieldNumber;
const int OrderGoodsInfo::kColorFieldNumber;
const int OrderGoodsInfo::kSizeFieldNumber;
#endif  // !_MSC_VER

OrderGoodsInfo::OrderGoodsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderGoodsInfo)
}

void OrderGoodsInfo::InitAsDefaultInstance() {
}

OrderGoodsInfo::OrderGoodsInfo(const OrderGoodsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrderGoodsInfo)
}

void OrderGoodsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qty_ = 0u;
  ismall_ = 0u;
  skuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  subtotalprice_ = 0;
  coupons_ = 0;
  voucher_ = 0;
  shoppingcash_ = 0;
  shoppingcard_ = 0;
  pointsprice_ = 0;
  promote_ = 0;
  shippingtax_ = 0;
  freightnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderGoodsInfo::~OrderGoodsInfo() {
  // @@protoc_insertion_point(destructor:OrderGoodsInfo)
  SharedDtor();
}

void OrderGoodsInfo::SharedDtor() {
  if (itno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itno_;
  }
  if (productname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete productname_;
  }
  if (sourceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceurl_;
  }
  if (picurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picurl_;
  }
  if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skuid_;
  }
  if (freightnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete freightnumber_;
  }
  if (kind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kind_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrderGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrderGoodsInfo& OrderGoodsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

OrderGoodsInfo* OrderGoodsInfo::default_instance_ = NULL;

OrderGoodsInfo* OrderGoodsInfo::New() const {
  return new OrderGoodsInfo;
}

void OrderGoodsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderGoodsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(qty_, ismall_);
    if (has_itno()) {
      if (itno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itno_->clear();
      }
    }
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        productname_->clear();
      }
    }
    if (has_sourceurl()) {
      if (sourceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceurl_->clear();
      }
    }
    if (has_picurl()) {
      if (picurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picurl_->clear();
      }
    }
    if (has_skuid()) {
      if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skuid_->clear();
      }
    }
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(subtotalprice_, shippingtax_);
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_freightnumber()) {
      if (freightnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        freightnumber_->clear();
      }
    }
    if (has_kind()) {
      if (kind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kind_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        size_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OrderGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:OrderGoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string itno = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_productName;
        break;
      }

      // optional string productName = 2;
      case 2: {
        if (tag == 18) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sourceUrl;
        break;
      }

      // optional string sourceUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_sourceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_picUrl;
        break;
      }

      // optional string picUrl = 4;
      case 4: {
        if (tag == 34) {
         parse_picUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_qty;
        break;
      }

      // optional uint32 qty = 5;
      case 5: {
        if (tag == 40) {
         parse_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isMall;
        break;
      }

      // optional uint32 isMall = 6;
      case 6: {
        if (tag == 48) {
         parse_isMall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismall_)));
          set_has_ismall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_skuId;
        break;
      }

      // optional string skuId = 7;
      case 7: {
        if (tag == 58) {
         parse_skuId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_price;
        break;
      }

      // optional double price = 8;
      case 8: {
        if (tag == 65) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_subTotalPrice;
        break;
      }

      // optional double subTotalPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_subTotalPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &subtotalprice_)));
          set_has_subtotalprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_coupons;
        break;
      }

      // optional double coupons = 10;
      case 10: {
        if (tag == 81) {
         parse_coupons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coupons_)));
          set_has_coupons();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_voucher;
        break;
      }

      // optional double voucher = 11;
      case 11: {
        if (tag == 89) {
         parse_voucher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voucher_)));
          set_has_voucher();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_shoppingCash;
        break;
      }

      // optional double shoppingCash = 12;
      case 12: {
        if (tag == 97) {
         parse_shoppingCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shoppingcash_)));
          set_has_shoppingcash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_shoppingCard;
        break;
      }

      // optional double shoppingCard = 13;
      case 13: {
        if (tag == 105) {
         parse_shoppingCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shoppingcard_)));
          set_has_shoppingcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_pointsPrice;
        break;
      }

      // optional double pointsPrice = 14;
      case 14: {
        if (tag == 113) {
         parse_pointsPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pointsprice_)));
          set_has_pointsprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_promote;
        break;
      }

      // optional double promote = 15;
      case 15: {
        if (tag == 121) {
         parse_promote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &promote_)));
          set_has_promote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_shippingTax;
        break;
      }

      // optional double shippingTax = 16;
      case 16: {
        if (tag == 129) {
         parse_shippingTax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shippingtax_)));
          set_has_shippingtax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_freightNumber;
        break;
      }

      // optional string freightNumber = 17;
      case 17: {
        if (tag == 138) {
         parse_freightNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freightnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_kind;
        break;
      }

      // optional string kind = 18;
      case 18: {
        if (tag == 146) {
         parse_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_color;
        break;
      }

      // optional string color = 19;
      case 19: {
        if (tag == 154) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_size;
        break;
      }

      // optional string size = 20;
      case 20: {
        if (tag == 162) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrderGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderGoodsInfo)
  return false;
#undef DO_
}

void OrderGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderGoodsInfo)
  // optional string itno = 1;
  if (has_itno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->itno(), output);
  }

  // optional string productName = 2;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productname(), output);
  }

  // optional string sourceUrl = 3;
  if (has_sourceurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sourceurl(), output);
  }

  // optional string picUrl = 4;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->picurl(), output);
  }

  // optional uint32 qty = 5;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->qty(), output);
  }

  // optional uint32 isMall = 6;
  if (has_ismall()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ismall(), output);
  }

  // optional string skuId = 7;
  if (has_skuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->skuid(), output);
  }

  // optional double price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // optional double subTotalPrice = 9;
  if (has_subtotalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->subtotalprice(), output);
  }

  // optional double coupons = 10;
  if (has_coupons()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->coupons(), output);
  }

  // optional double voucher = 11;
  if (has_voucher()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voucher(), output);
  }

  // optional double shoppingCash = 12;
  if (has_shoppingcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shoppingcash(), output);
  }

  // optional double shoppingCard = 13;
  if (has_shoppingcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->shoppingcard(), output);
  }

  // optional double pointsPrice = 14;
  if (has_pointsprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->pointsprice(), output);
  }

  // optional double promote = 15;
  if (has_promote()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->promote(), output);
  }

  // optional double shippingTax = 16;
  if (has_shippingtax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->shippingtax(), output);
  }

  // optional string freightNumber = 17;
  if (has_freightnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->freightnumber(), output);
  }

  // optional string kind = 18;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->kind(), output);
  }

  // optional string color = 19;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->color(), output);
  }

  // optional string size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:OrderGoodsInfo)
}

int OrderGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string itno = 1;
    if (has_itno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itno());
    }

    // optional string productName = 2;
    if (has_productname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }

    // optional string sourceUrl = 3;
    if (has_sourceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceurl());
    }

    // optional string picUrl = 4;
    if (has_picurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picurl());
    }

    // optional uint32 qty = 5;
    if (has_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qty());
    }

    // optional uint32 isMall = 6;
    if (has_ismall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismall());
    }

    // optional string skuId = 7;
    if (has_skuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skuid());
    }

    // optional double price = 8;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double subTotalPrice = 9;
    if (has_subtotalprice()) {
      total_size += 1 + 8;
    }

    // optional double coupons = 10;
    if (has_coupons()) {
      total_size += 1 + 8;
    }

    // optional double voucher = 11;
    if (has_voucher()) {
      total_size += 1 + 8;
    }

    // optional double shoppingCash = 12;
    if (has_shoppingcash()) {
      total_size += 1 + 8;
    }

    // optional double shoppingCard = 13;
    if (has_shoppingcard()) {
      total_size += 1 + 8;
    }

    // optional double pointsPrice = 14;
    if (has_pointsprice()) {
      total_size += 1 + 8;
    }

    // optional double promote = 15;
    if (has_promote()) {
      total_size += 1 + 8;
    }

    // optional double shippingTax = 16;
    if (has_shippingtax()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string freightNumber = 17;
    if (has_freightnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freightnumber());
    }

    // optional string kind = 18;
    if (has_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kind());
    }

    // optional string color = 19;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderGoodsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrderGoodsInfo*>(&from));
}

void OrderGoodsInfo::MergeFrom(const OrderGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itno()) {
      set_itno(from.itno());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_sourceurl()) {
      set_sourceurl(from.sourceurl());
    }
    if (from.has_picurl()) {
      set_picurl(from.picurl());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_ismall()) {
      set_ismall(from.ismall());
    }
    if (from.has_skuid()) {
      set_skuid(from.skuid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subtotalprice()) {
      set_subtotalprice(from.subtotalprice());
    }
    if (from.has_coupons()) {
      set_coupons(from.coupons());
    }
    if (from.has_voucher()) {
      set_voucher(from.voucher());
    }
    if (from.has_shoppingcash()) {
      set_shoppingcash(from.shoppingcash());
    }
    if (from.has_shoppingcard()) {
      set_shoppingcard(from.shoppingcard());
    }
    if (from.has_pointsprice()) {
      set_pointsprice(from.pointsprice());
    }
    if (from.has_promote()) {
      set_promote(from.promote());
    }
    if (from.has_shippingtax()) {
      set_shippingtax(from.shippingtax());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_freightnumber()) {
      set_freightnumber(from.freightnumber());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OrderGoodsInfo::CopyFrom(const OrderGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderGoodsInfo::IsInitialized() const {

  return true;
}

void OrderGoodsInfo::Swap(OrderGoodsInfo* other) {
  if (other != this) {
    std::swap(itno_, other->itno_);
    std::swap(productname_, other->productname_);
    std::swap(sourceurl_, other->sourceurl_);
    std::swap(picurl_, other->picurl_);
    std::swap(qty_, other->qty_);
    std::swap(ismall_, other->ismall_);
    std::swap(skuid_, other->skuid_);
    std::swap(price_, other->price_);
    std::swap(subtotalprice_, other->subtotalprice_);
    std::swap(coupons_, other->coupons_);
    std::swap(voucher_, other->voucher_);
    std::swap(shoppingcash_, other->shoppingcash_);
    std::swap(shoppingcard_, other->shoppingcard_);
    std::swap(pointsprice_, other->pointsprice_);
    std::swap(promote_, other->promote_);
    std::swap(shippingtax_, other->shippingtax_);
    std::swap(freightnumber_, other->freightnumber_);
    std::swap(kind_, other->kind_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrderGoodsInfo::GetTypeName() const {
  return "OrderGoodsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int NewOrder::kOgNoFieldNumber;
const int NewOrder::kOgSeqFieldNumber;
const int NewOrder::kMemGuidFieldNumber;
const int NewOrder::kTotalPayFieldNumber;
const int NewOrder::kMemberNameFieldNumber;
const int NewOrder::kMemberCellphoneFieldNumber;
const int NewOrder::kInsertDateFieldNumber;
const int NewOrder::kPayTypeFieldNumber;
const int NewOrder::kPackNoFieldNumber;
const int NewOrder::kPackStateFieldNumber;
const int NewOrder::kPackStateStrFieldNumber;
const int NewOrder::kTypeFieldNumber;
const int NewOrder::kPackQueryNoFieldNumber;
const int NewOrder::kMerchantIdFieldNumber;
const int NewOrder::kFreightFieldNumber;
const int NewOrder::kBuyernameFieldNumber;
const int NewOrder::kGoodslistFieldNumber;
#endif  // !_MSC_VER

NewOrder::NewOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewOrder)
}

void NewOrder::InitAsDefaultInstance() {
}

NewOrder::NewOrder(const NewOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewOrder)
}

void NewOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalpay_ = 0;
  membername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membercellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packstate_ = 0u;
  packstatestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  packqueryno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merchantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freight_ = 0;
  buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:NewOrder)
  SharedDtor();
}

void NewOrder::SharedDtor() {
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membername_;
  }
  if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membercellphone_;
  }
  if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete insertdate_;
  }
  if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paytype_;
  }
  if (packno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packno_;
  }
  if (packstatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packstatestr_;
  }
  if (packqueryno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packqueryno_;
  }
  if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merchantid_;
  }
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewOrder& NewOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

NewOrder* NewOrder::default_instance_ = NULL;

NewOrder* NewOrder::New() const {
  return new NewOrder;
}

void NewOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    totalpay_ = 0;
    if (has_membername()) {
      if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membername_->clear();
      }
    }
    if (has_membercellphone()) {
      if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membercellphone_->clear();
      }
    }
    if (has_insertdate()) {
      if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        insertdate_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        paytype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(packstate_, type_);
    if (has_packno()) {
      if (packno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packno_->clear();
      }
    }
    if (has_packstatestr()) {
      if (packstatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packstatestr_->clear();
      }
    }
    if (has_packqueryno()) {
      if (packqueryno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packqueryno_->clear();
      }
    }
    if (has_merchantid()) {
      if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        merchantid_->clear();
      }
    }
    freight_ = 0;
    if (has_buyername()) {
      if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:NewOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ogNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogSeq;
        break;
      }

      // optional string ogSeq = 2;
      case 2: {
        if (tag == 18) {
         parse_ogSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memGuid;
        break;
      }

      // optional string memGuid = 3;
      case 3: {
        if (tag == 26) {
         parse_memGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_totalPay;
        break;
      }

      // optional double totalPay = 4;
      case 4: {
        if (tag == 33) {
         parse_totalPay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalpay_)));
          set_has_totalpay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_memberName;
        break;
      }

      // optional string memberName = 5;
      case 5: {
        if (tag == 42) {
         parse_memberName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memberCellphone;
        break;
      }

      // optional string memberCellphone = 6;
      case 6: {
        if (tag == 50) {
         parse_memberCellphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membercellphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_insertDate;
        break;
      }

      // optional string insertDate = 7;
      case 7: {
        if (tag == 58) {
         parse_insertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payType;
        break;
      }

      // optional string payType = 8;
      case 8: {
        if (tag == 66) {
         parse_payType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_packNo;
        break;
      }

      // optional string packNo = 9;
      case 9: {
        if (tag == 74) {
         parse_packNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_packState;
        break;
      }

      // optional uint32 packState = 10;
      case 10: {
        if (tag == 80) {
         parse_packState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packstate_)));
          set_has_packstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_packStateStr;
        break;
      }

      // optional string packStateStr = 11;
      case 11: {
        if (tag == 90) {
         parse_packStateStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packstatestr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_packQueryNo;
        break;
      }

      // optional string packQueryNo = 13;
      case 13: {
        if (tag == 106) {
         parse_packQueryNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packqueryno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_merchantId;
        break;
      }

      // optional string merchantId = 14;
      case 14: {
        if (tag == 114) {
         parse_merchantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchantid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_freight;
        break;
      }

      // optional double freight = 15;
      case 15: {
        if (tag == 121) {
         parse_freight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freight_)));
          set_has_freight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_buyername;
        break;
      }

      // optional string buyername = 16;
      case 16: {
        if (tag == 130) {
         parse_buyername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        break;
      }

      // repeated .OrderGoodsInfo goodslist = 25;
      case 25: {
        if (tag == 202) {
         parse_goodslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewOrder)
  return false;
#undef DO_
}

void NewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewOrder)
  // optional string ogNo = 1;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ogno(), output);
  }

  // optional string ogSeq = 2;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogseq(), output);
  }

  // optional string memGuid = 3;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memguid(), output);
  }

  // optional double totalPay = 4;
  if (has_totalpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->totalpay(), output);
  }

  // optional string memberName = 5;
  if (has_membername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->membername(), output);
  }

  // optional string memberCellphone = 6;
  if (has_membercellphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->membercellphone(), output);
  }

  // optional string insertDate = 7;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->insertdate(), output);
  }

  // optional string payType = 8;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->paytype(), output);
  }

  // optional string packNo = 9;
  if (has_packno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->packno(), output);
  }

  // optional uint32 packState = 10;
  if (has_packstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->packstate(), output);
  }

  // optional string packStateStr = 11;
  if (has_packstatestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->packstatestr(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional string packQueryNo = 13;
  if (has_packqueryno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->packqueryno(), output);
  }

  // optional string merchantId = 14;
  if (has_merchantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->merchantid(), output);
  }

  // optional double freight = 15;
  if (has_freight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->freight(), output);
  }

  // optional string buyername = 16;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->buyername(), output);
  }

  // repeated .OrderGoodsInfo goodslist = 25;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->goodslist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:NewOrder)
}

int NewOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ogNo = 1;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogSeq = 2;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

    // optional string memGuid = 3;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional double totalPay = 4;
    if (has_totalpay()) {
      total_size += 1 + 8;
    }

    // optional string memberName = 5;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membername());
    }

    // optional string memberCellphone = 6;
    if (has_membercellphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membercellphone());
    }

    // optional string insertDate = 7;
    if (has_insertdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insertdate());
    }

    // optional string payType = 8;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string packNo = 9;
    if (has_packno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packno());
    }

    // optional uint32 packState = 10;
    if (has_packstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packstate());
    }

    // optional string packStateStr = 11;
    if (has_packstatestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packstatestr());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string packQueryNo = 13;
    if (has_packqueryno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packqueryno());
    }

    // optional string merchantId = 14;
    if (has_merchantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchantid());
    }

    // optional double freight = 15;
    if (has_freight()) {
      total_size += 1 + 8;
    }

    // optional string buyername = 16;
    if (has_buyername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyername());
    }

  }
  // repeated .OrderGoodsInfo goodslist = 25;
  total_size += 2 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewOrder*>(&from));
}

void NewOrder::MergeFrom(const NewOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_totalpay()) {
      set_totalpay(from.totalpay());
    }
    if (from.has_membername()) {
      set_membername(from.membername());
    }
    if (from.has_membercellphone()) {
      set_membercellphone(from.membercellphone());
    }
    if (from.has_insertdate()) {
      set_insertdate(from.insertdate());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_packno()) {
      set_packno(from.packno());
    }
    if (from.has_packstate()) {
      set_packstate(from.packstate());
    }
    if (from.has_packstatestr()) {
      set_packstatestr(from.packstatestr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_packqueryno()) {
      set_packqueryno(from.packqueryno());
    }
    if (from.has_merchantid()) {
      set_merchantid(from.merchantid());
    }
    if (from.has_freight()) {
      set_freight(from.freight());
    }
    if (from.has_buyername()) {
      set_buyername(from.buyername());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewOrder::CopyFrom(const NewOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {

  return true;
}

void NewOrder::Swap(NewOrder* other) {
  if (other != this) {
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(memguid_, other->memguid_);
    std::swap(totalpay_, other->totalpay_);
    std::swap(membername_, other->membername_);
    std::swap(membercellphone_, other->membercellphone_);
    std::swap(insertdate_, other->insertdate_);
    std::swap(paytype_, other->paytype_);
    std::swap(packno_, other->packno_);
    std::swap(packstate_, other->packstate_);
    std::swap(packstatestr_, other->packstatestr_);
    std::swap(type_, other->type_);
    std::swap(packqueryno_, other->packqueryno_);
    std::swap(merchantid_, other->merchantid_);
    std::swap(freight_, other->freight_);
    std::swap(buyername_, other->buyername_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewOrder::GetTypeName() const {
  return "NewOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int PayOrder::kOgNoFieldNumber;
const int PayOrder::kOgSeqFieldNumber;
const int PayOrder::kMemGuidFieldNumber;
const int PayOrder::kTotalPayFieldNumber;
const int PayOrder::kMemberNameFieldNumber;
const int PayOrder::kMemberCellphoneFieldNumber;
const int PayOrder::kInsertDateFieldNumber;
const int PayOrder::kPayTypeFieldNumber;
const int PayOrder::kPackNoFieldNumber;
const int PayOrder::kPackStateFieldNumber;
const int PayOrder::kPackStateStrFieldNumber;
const int PayOrder::kTypeFieldNumber;
const int PayOrder::kPackQueryNoFieldNumber;
const int PayOrder::kMerchantIdFieldNumber;
const int PayOrder::kFreightFieldNumber;
const int PayOrder::kBuyernameFieldNumber;
const int PayOrder::kPayDateFieldNumber;
const int PayOrder::kGoodslistFieldNumber;
#endif  // !_MSC_VER

PayOrder::PayOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayOrder)
}

void PayOrder::InitAsDefaultInstance() {
}

PayOrder::PayOrder(const PayOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PayOrder)
}

void PayOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalpay_ = 0;
  membername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membercellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packstate_ = 0u;
  packstatestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  packqueryno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merchantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freight_ = 0;
  buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOrder::~PayOrder() {
  // @@protoc_insertion_point(destructor:PayOrder)
  SharedDtor();
}

void PayOrder::SharedDtor() {
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membername_;
  }
  if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membercellphone_;
  }
  if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete insertdate_;
  }
  if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paytype_;
  }
  if (packno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packno_;
  }
  if (packstatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packstatestr_;
  }
  if (packqueryno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packqueryno_;
  }
  if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merchantid_;
  }
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  if (paydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paydate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PayOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PayOrder& PayOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

PayOrder* PayOrder::default_instance_ = NULL;

PayOrder* PayOrder::New() const {
  return new PayOrder;
}

void PayOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PayOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    totalpay_ = 0;
    if (has_membername()) {
      if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membername_->clear();
      }
    }
    if (has_membercellphone()) {
      if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membercellphone_->clear();
      }
    }
    if (has_insertdate()) {
      if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        insertdate_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        paytype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(packstate_, type_);
    if (has_packno()) {
      if (packno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packno_->clear();
      }
    }
    if (has_packstatestr()) {
      if (packstatestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packstatestr_->clear();
      }
    }
    if (has_packqueryno()) {
      if (packqueryno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packqueryno_->clear();
      }
    }
    if (has_merchantid()) {
      if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        merchantid_->clear();
      }
    }
    freight_ = 0;
    if (has_buyername()) {
      if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyername_->clear();
      }
    }
  }
  if (has_paydate()) {
    if (paydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      paydate_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PayOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:PayOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ogNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogSeq;
        break;
      }

      // optional string ogSeq = 2;
      case 2: {
        if (tag == 18) {
         parse_ogSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memGuid;
        break;
      }

      // optional string memGuid = 3;
      case 3: {
        if (tag == 26) {
         parse_memGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_totalPay;
        break;
      }

      // optional double totalPay = 4;
      case 4: {
        if (tag == 33) {
         parse_totalPay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalpay_)));
          set_has_totalpay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_memberName;
        break;
      }

      // optional string memberName = 5;
      case 5: {
        if (tag == 42) {
         parse_memberName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memberCellphone;
        break;
      }

      // optional string memberCellphone = 6;
      case 6: {
        if (tag == 50) {
         parse_memberCellphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membercellphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_insertDate;
        break;
      }

      // optional string insertDate = 7;
      case 7: {
        if (tag == 58) {
         parse_insertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payType;
        break;
      }

      // optional string payType = 8;
      case 8: {
        if (tag == 66) {
         parse_payType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_packNo;
        break;
      }

      // optional string packNo = 9;
      case 9: {
        if (tag == 74) {
         parse_packNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_packState;
        break;
      }

      // optional uint32 packState = 10;
      case 10: {
        if (tag == 80) {
         parse_packState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packstate_)));
          set_has_packstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_packStateStr;
        break;
      }

      // optional string packStateStr = 11;
      case 11: {
        if (tag == 90) {
         parse_packStateStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packstatestr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_packQueryNo;
        break;
      }

      // optional string packQueryNo = 13;
      case 13: {
        if (tag == 106) {
         parse_packQueryNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packqueryno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_merchantId;
        break;
      }

      // optional string merchantId = 14;
      case 14: {
        if (tag == 114) {
         parse_merchantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchantid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_freight;
        break;
      }

      // optional double freight = 15;
      case 15: {
        if (tag == 121) {
         parse_freight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freight_)));
          set_has_freight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_buyername;
        break;
      }

      // optional string buyername = 16;
      case 16: {
        if (tag == 130) {
         parse_buyername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_payDate;
        break;
      }

      // optional string payDate = 17;
      case 17: {
        if (tag == 138) {
         parse_payDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paydate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        break;
      }

      // repeated .OrderGoodsInfo goodslist = 25;
      case 25: {
        if (tag == 202) {
         parse_goodslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayOrder)
  return false;
#undef DO_
}

void PayOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayOrder)
  // optional string ogNo = 1;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ogno(), output);
  }

  // optional string ogSeq = 2;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogseq(), output);
  }

  // optional string memGuid = 3;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memguid(), output);
  }

  // optional double totalPay = 4;
  if (has_totalpay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->totalpay(), output);
  }

  // optional string memberName = 5;
  if (has_membername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->membername(), output);
  }

  // optional string memberCellphone = 6;
  if (has_membercellphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->membercellphone(), output);
  }

  // optional string insertDate = 7;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->insertdate(), output);
  }

  // optional string payType = 8;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->paytype(), output);
  }

  // optional string packNo = 9;
  if (has_packno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->packno(), output);
  }

  // optional uint32 packState = 10;
  if (has_packstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->packstate(), output);
  }

  // optional string packStateStr = 11;
  if (has_packstatestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->packstatestr(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional string packQueryNo = 13;
  if (has_packqueryno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->packqueryno(), output);
  }

  // optional string merchantId = 14;
  if (has_merchantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->merchantid(), output);
  }

  // optional double freight = 15;
  if (has_freight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->freight(), output);
  }

  // optional string buyername = 16;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->buyername(), output);
  }

  // optional string payDate = 17;
  if (has_paydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->paydate(), output);
  }

  // repeated .OrderGoodsInfo goodslist = 25;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->goodslist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:PayOrder)
}

int PayOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ogNo = 1;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogSeq = 2;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

    // optional string memGuid = 3;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional double totalPay = 4;
    if (has_totalpay()) {
      total_size += 1 + 8;
    }

    // optional string memberName = 5;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membername());
    }

    // optional string memberCellphone = 6;
    if (has_membercellphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membercellphone());
    }

    // optional string insertDate = 7;
    if (has_insertdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insertdate());
    }

    // optional string payType = 8;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string packNo = 9;
    if (has_packno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packno());
    }

    // optional uint32 packState = 10;
    if (has_packstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packstate());
    }

    // optional string packStateStr = 11;
    if (has_packstatestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packstatestr());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string packQueryNo = 13;
    if (has_packqueryno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packqueryno());
    }

    // optional string merchantId = 14;
    if (has_merchantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchantid());
    }

    // optional double freight = 15;
    if (has_freight()) {
      total_size += 1 + 8;
    }

    // optional string buyername = 16;
    if (has_buyername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyername());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string payDate = 17;
    if (has_paydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paydate());
    }

  }
  // repeated .OrderGoodsInfo goodslist = 25;
  total_size += 2 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PayOrder*>(&from));
}

void PayOrder::MergeFrom(const PayOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_totalpay()) {
      set_totalpay(from.totalpay());
    }
    if (from.has_membername()) {
      set_membername(from.membername());
    }
    if (from.has_membercellphone()) {
      set_membercellphone(from.membercellphone());
    }
    if (from.has_insertdate()) {
      set_insertdate(from.insertdate());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_packno()) {
      set_packno(from.packno());
    }
    if (from.has_packstate()) {
      set_packstate(from.packstate());
    }
    if (from.has_packstatestr()) {
      set_packstatestr(from.packstatestr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_packqueryno()) {
      set_packqueryno(from.packqueryno());
    }
    if (from.has_merchantid()) {
      set_merchantid(from.merchantid());
    }
    if (from.has_freight()) {
      set_freight(from.freight());
    }
    if (from.has_buyername()) {
      set_buyername(from.buyername());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_paydate()) {
      set_paydate(from.paydate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PayOrder::CopyFrom(const PayOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOrder::IsInitialized() const {

  return true;
}

void PayOrder::Swap(PayOrder* other) {
  if (other != this) {
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(memguid_, other->memguid_);
    std::swap(totalpay_, other->totalpay_);
    std::swap(membername_, other->membername_);
    std::swap(membercellphone_, other->membercellphone_);
    std::swap(insertdate_, other->insertdate_);
    std::swap(paytype_, other->paytype_);
    std::swap(packno_, other->packno_);
    std::swap(packstate_, other->packstate_);
    std::swap(packstatestr_, other->packstatestr_);
    std::swap(type_, other->type_);
    std::swap(packqueryno_, other->packqueryno_);
    std::swap(merchantid_, other->merchantid_);
    std::swap(freight_, other->freight_);
    std::swap(buyername_, other->buyername_);
    std::swap(paydate_, other->paydate_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PayOrder::GetTypeName() const {
  return "PayOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsComment::kOgNoFieldNumber;
const int GoodsComment::kOgSeqFieldNumber;
const int GoodsComment::kMemGuidFieldNumber;
const int GoodsComment::kMemberNameFieldNumber;
const int GoodsComment::kMemberCellphoneFieldNumber;
const int GoodsComment::kInsertDateFieldNumber;
const int GoodsComment::kPayTypeFieldNumber;
const int GoodsComment::kMerchantIdFieldNumber;
const int GoodsComment::kBugernameFieldNumber;
const int GoodsComment::kEvaluatelevelFieldNumber;
const int GoodsComment::kEvaluatecontextFieldNumber;
const int GoodsComment::kCommentDateFieldNumber;
const int GoodsComment::kGoodsFieldNumber;
#endif  // !_MSC_VER

GoodsComment::GoodsComment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoodsComment)
}

void GoodsComment::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  goods_ = const_cast< ::OrderGoodsInfo*>(
      ::OrderGoodsInfo::internal_default_instance());
#else
  goods_ = const_cast< ::OrderGoodsInfo*>(&::OrderGoodsInfo::default_instance());
#endif
}

GoodsComment::GoodsComment(const GoodsComment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GoodsComment)
}

void GoodsComment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membercellphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merchantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bugername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluatelevel_ = 0;
  evaluatecontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goods_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsComment::~GoodsComment() {
  // @@protoc_insertion_point(destructor:GoodsComment)
  SharedDtor();
}

void GoodsComment::SharedDtor() {
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membername_;
  }
  if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membercellphone_;
  }
  if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete insertdate_;
  }
  if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paytype_;
  }
  if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merchantid_;
  }
  if (bugername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bugername_;
  }
  if (evaluatecontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete evaluatecontext_;
  }
  if (commentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete commentdate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete goods_;
  }
}

void GoodsComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GoodsComment& GoodsComment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

GoodsComment* GoodsComment::default_instance_ = NULL;

GoodsComment* GoodsComment::New() const {
  return new GoodsComment;
}

void GoodsComment::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_membername()) {
      if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membername_->clear();
      }
    }
    if (has_membercellphone()) {
      if (membercellphone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membercellphone_->clear();
      }
    }
    if (has_insertdate()) {
      if (insertdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        insertdate_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        paytype_->clear();
      }
    }
    if (has_merchantid()) {
      if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        merchantid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_bugername()) {
      if (bugername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bugername_->clear();
      }
    }
    evaluatelevel_ = 0;
    if (has_evaluatecontext()) {
      if (evaluatecontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        evaluatecontext_->clear();
      }
    }
    if (has_commentdate()) {
      if (commentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        commentdate_->clear();
      }
    }
    if (has_goods()) {
      if (goods_ != NULL) goods_->::OrderGoodsInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GoodsComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:GoodsComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ogNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogSeq;
        break;
      }

      // optional string ogSeq = 2;
      case 2: {
        if (tag == 18) {
         parse_ogSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memGuid;
        break;
      }

      // optional string memGuid = 3;
      case 3: {
        if (tag == 26) {
         parse_memGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberName;
        break;
      }

      // optional string memberName = 4;
      case 4: {
        if (tag == 34) {
         parse_memberName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_memberCellphone;
        break;
      }

      // optional string memberCellphone = 5;
      case 5: {
        if (tag == 42) {
         parse_memberCellphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membercellphone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_insertDate;
        break;
      }

      // optional string insertDate = 6;
      case 6: {
        if (tag == 50) {
         parse_insertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_payType;
        break;
      }

      // optional string payType = 7;
      case 7: {
        if (tag == 58) {
         parse_payType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_merchantId;
        break;
      }

      // optional string merchantId = 8;
      case 8: {
        if (tag == 66) {
         parse_merchantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchantid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bugername;
        break;
      }

      // optional string bugername = 9;
      case 9: {
        if (tag == 74) {
         parse_bugername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bugername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_evaluatelevel;
        break;
      }

      // optional double evaluatelevel = 10;
      case 10: {
        if (tag == 81) {
         parse_evaluatelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evaluatelevel_)));
          set_has_evaluatelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_evaluatecontext;
        break;
      }

      // optional string evaluatecontext = 11;
      case 11: {
        if (tag == 90) {
         parse_evaluatecontext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_evaluatecontext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_goods;
        break;
      }

      // optional .OrderGoodsInfo goods = 15;
      case 15: {
        if (tag == 122) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_commentDate;
        break;
      }

      // optional string commentDate = 17;
      case 17: {
        if (tag == 138) {
         parse_commentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commentdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoodsComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoodsComment)
  return false;
#undef DO_
}

void GoodsComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoodsComment)
  // optional string ogNo = 1;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ogno(), output);
  }

  // optional string ogSeq = 2;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogseq(), output);
  }

  // optional string memGuid = 3;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memguid(), output);
  }

  // optional string memberName = 4;
  if (has_membername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->membername(), output);
  }

  // optional string memberCellphone = 5;
  if (has_membercellphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->membercellphone(), output);
  }

  // optional string insertDate = 6;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->insertdate(), output);
  }

  // optional string payType = 7;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->paytype(), output);
  }

  // optional string merchantId = 8;
  if (has_merchantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->merchantid(), output);
  }

  // optional string bugername = 9;
  if (has_bugername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bugername(), output);
  }

  // optional double evaluatelevel = 10;
  if (has_evaluatelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->evaluatelevel(), output);
  }

  // optional string evaluatecontext = 11;
  if (has_evaluatecontext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->evaluatecontext(), output);
  }

  // optional .OrderGoodsInfo goods = 15;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->goods(), output);
  }

  // optional string commentDate = 17;
  if (has_commentdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->commentdate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:GoodsComment)
}

int GoodsComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ogNo = 1;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogSeq = 2;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

    // optional string memGuid = 3;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string memberName = 4;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membername());
    }

    // optional string memberCellphone = 5;
    if (has_membercellphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membercellphone());
    }

    // optional string insertDate = 6;
    if (has_insertdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insertdate());
    }

    // optional string payType = 7;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

    // optional string merchantId = 8;
    if (has_merchantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchantid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bugername = 9;
    if (has_bugername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bugername());
    }

    // optional double evaluatelevel = 10;
    if (has_evaluatelevel()) {
      total_size += 1 + 8;
    }

    // optional string evaluatecontext = 11;
    if (has_evaluatecontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->evaluatecontext());
    }

    // optional string commentDate = 17;
    if (has_commentdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commentdate());
    }

    // optional .OrderGoodsInfo goods = 15;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsComment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GoodsComment*>(&from));
}

void GoodsComment::MergeFrom(const GoodsComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_membername()) {
      set_membername(from.membername());
    }
    if (from.has_membercellphone()) {
      set_membercellphone(from.membercellphone());
    }
    if (from.has_insertdate()) {
      set_insertdate(from.insertdate());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_merchantid()) {
      set_merchantid(from.merchantid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bugername()) {
      set_bugername(from.bugername());
    }
    if (from.has_evaluatelevel()) {
      set_evaluatelevel(from.evaluatelevel());
    }
    if (from.has_evaluatecontext()) {
      set_evaluatecontext(from.evaluatecontext());
    }
    if (from.has_commentdate()) {
      set_commentdate(from.commentdate());
    }
    if (from.has_goods()) {
      mutable_goods()->::OrderGoodsInfo::MergeFrom(from.goods());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GoodsComment::CopyFrom(const GoodsComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsComment::IsInitialized() const {

  return true;
}

void GoodsComment::Swap(GoodsComment* other) {
  if (other != this) {
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(memguid_, other->memguid_);
    std::swap(membername_, other->membername_);
    std::swap(membercellphone_, other->membercellphone_);
    std::swap(insertdate_, other->insertdate_);
    std::swap(paytype_, other->paytype_);
    std::swap(merchantid_, other->merchantid_);
    std::swap(bugername_, other->bugername_);
    std::swap(evaluatelevel_, other->evaluatelevel_);
    std::swap(evaluatecontext_, other->evaluatecontext_);
    std::swap(commentdate_, other->commentdate_);
    std::swap(goods_, other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GoodsComment::GetTypeName() const {
  return "GoodsComment";
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnGoodsInfo::kSkuIdFieldNumber;
const int ReturnGoodsInfo::kProductPriceFieldNumber;
const int ReturnGoodsInfo::kProductQtyFieldNumber;
const int ReturnGoodsInfo::kReturnQtyFieldNumber;
const int ReturnGoodsInfo::kProductMainUrlFieldNumber;
const int ReturnGoodsInfo::kSourceUrlFieldNumber;
const int ReturnGoodsInfo::kColorFieldNumber;
const int ReturnGoodsInfo::kSizeFieldNumber;
const int ReturnGoodsInfo::kReasonFieldNumber;
const int ReturnGoodsInfo::kAprnPromoteFieldNumber;
const int ReturnGoodsInfo::kAprnVoucherFieldNumber;
const int ReturnGoodsInfo::kShippingTaxFieldNumber;
const int ReturnGoodsInfo::kOrigPriceFieldNumber;
const int ReturnGoodsInfo::kAprnPointFieldNumber;
const int ReturnGoodsInfo::kAprnPointPriceFieldNumber;
const int ReturnGoodsInfo::kAprnCashFieldNumber;
const int ReturnGoodsInfo::kRefundablePriceFieldNumber;
const int ReturnGoodsInfo::kProductNameFieldNumber;
const int ReturnGoodsInfo::kRssSeqFieldNumber;
#endif  // !_MSC_VER

ReturnGoodsInfo::ReturnGoodsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReturnGoodsInfo)
}

void ReturnGoodsInfo::InitAsDefaultInstance() {
}

ReturnGoodsInfo::ReturnGoodsInfo(const ReturnGoodsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReturnGoodsInfo)
}

void ReturnGoodsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  skuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productprice_ = 0;
  productqty_ = 0;
  returnqty_ = 0;
  productmainurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aprnpromote_ = 0;
  aprnvoucher_ = 0;
  shippingtax_ = 0;
  origprice_ = 0;
  aprnpoint_ = 0;
  aprnpointprice_ = 0;
  aprncash_ = 0;
  refundableprice_ = 0;
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnGoodsInfo::~ReturnGoodsInfo() {
  // @@protoc_insertion_point(destructor:ReturnGoodsInfo)
  SharedDtor();
}

void ReturnGoodsInfo::SharedDtor() {
  if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skuid_;
  }
  if (productmainurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete productmainurl_;
  }
  if (sourceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceurl_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (productname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete productname_;
  }
  if (rssseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rssseq_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReturnGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReturnGoodsInfo& ReturnGoodsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

ReturnGoodsInfo* ReturnGoodsInfo::default_instance_ = NULL;

ReturnGoodsInfo* ReturnGoodsInfo::New() const {
  return new ReturnGoodsInfo;
}

void ReturnGoodsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnGoodsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(productprice_, returnqty_);
    if (has_skuid()) {
      if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skuid_->clear();
      }
    }
    if (has_productmainurl()) {
      if (productmainurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        productmainurl_->clear();
      }
    }
    if (has_sourceurl()) {
      if (sourceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceurl_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        size_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(aprnpromote_, aprncash_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    refundableprice_ = 0;
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        productname_->clear();
      }
    }
    if (has_rssseq()) {
      if (rssseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rssseq_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReturnGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ReturnGoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string skuId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_productPrice;
        break;
      }

      // optional double productPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_productPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &productprice_)));
          set_has_productprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_productQty;
        break;
      }

      // optional int32 productQty = 3;
      case 3: {
        if (tag == 24) {
         parse_productQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productqty_)));
          set_has_productqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_returnQty;
        break;
      }

      // optional int32 returnQty = 4;
      case 4: {
        if (tag == 32) {
         parse_returnQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnqty_)));
          set_has_returnqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_productMainUrl;
        break;
      }

      // optional string productMainUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_productMainUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productmainurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sourceUrl;
        break;
      }

      // optional string sourceUrl = 6;
      case 6: {
        if (tag == 50) {
         parse_sourceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_color;
        break;
      }

      // optional string color = 7;
      case 7: {
        if (tag == 58) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_size;
        break;
      }

      // optional string size = 8;
      case 8: {
        if (tag == 66) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_reason;
        break;
      }

      // optional string reason = 9;
      case 9: {
        if (tag == 74) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_aprnPromote;
        break;
      }

      // optional double aprnPromote = 10;
      case 10: {
        if (tag == 81) {
         parse_aprnPromote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aprnpromote_)));
          set_has_aprnpromote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_aprnVoucher;
        break;
      }

      // optional double aprnVoucher = 11;
      case 11: {
        if (tag == 89) {
         parse_aprnVoucher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aprnvoucher_)));
          set_has_aprnvoucher();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_shippingTax;
        break;
      }

      // optional double shippingTax = 12;
      case 12: {
        if (tag == 97) {
         parse_shippingTax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shippingtax_)));
          set_has_shippingtax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_origPrice;
        break;
      }

      // optional double origPrice = 13;
      case 13: {
        if (tag == 105) {
         parse_origPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origprice_)));
          set_has_origprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_aprnPoint;
        break;
      }

      // optional double aprnPoint = 14;
      case 14: {
        if (tag == 113) {
         parse_aprnPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aprnpoint_)));
          set_has_aprnpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_aprnPointPrice;
        break;
      }

      // optional double aprnPointPrice = 15;
      case 15: {
        if (tag == 121) {
         parse_aprnPointPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aprnpointprice_)));
          set_has_aprnpointprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_aprnCash;
        break;
      }

      // optional double aprnCash = 16;
      case 16: {
        if (tag == 129) {
         parse_aprnCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aprncash_)));
          set_has_aprncash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_refundablePrice;
        break;
      }

      // optional double refundablePrice = 17;
      case 17: {
        if (tag == 137) {
         parse_refundablePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refundableprice_)));
          set_has_refundableprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_productName;
        break;
      }

      // optional string productName = 18;
      case 18: {
        if (tag == 146) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_rssSeq;
        break;
      }

      // optional string rssSeq = 19;
      case 19: {
        if (tag == 154) {
         parse_rssSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rssseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReturnGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReturnGoodsInfo)
  return false;
#undef DO_
}

void ReturnGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReturnGoodsInfo)
  // optional string skuId = 1;
  if (has_skuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->skuid(), output);
  }

  // optional double productPrice = 2;
  if (has_productprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->productprice(), output);
  }

  // optional int32 productQty = 3;
  if (has_productqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->productqty(), output);
  }

  // optional int32 returnQty = 4;
  if (has_returnqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->returnqty(), output);
  }

  // optional string productMainUrl = 5;
  if (has_productmainurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->productmainurl(), output);
  }

  // optional string sourceUrl = 6;
  if (has_sourceurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sourceurl(), output);
  }

  // optional string color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->color(), output);
  }

  // optional string size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->size(), output);
  }

  // optional string reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->reason(), output);
  }

  // optional double aprnPromote = 10;
  if (has_aprnpromote()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->aprnpromote(), output);
  }

  // optional double aprnVoucher = 11;
  if (has_aprnvoucher()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->aprnvoucher(), output);
  }

  // optional double shippingTax = 12;
  if (has_shippingtax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shippingtax(), output);
  }

  // optional double origPrice = 13;
  if (has_origprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->origprice(), output);
  }

  // optional double aprnPoint = 14;
  if (has_aprnpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->aprnpoint(), output);
  }

  // optional double aprnPointPrice = 15;
  if (has_aprnpointprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->aprnpointprice(), output);
  }

  // optional double aprnCash = 16;
  if (has_aprncash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->aprncash(), output);
  }

  // optional double refundablePrice = 17;
  if (has_refundableprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->refundableprice(), output);
  }

  // optional string productName = 18;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->productname(), output);
  }

  // optional string rssSeq = 19;
  if (has_rssseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->rssseq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ReturnGoodsInfo)
}

int ReturnGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string skuId = 1;
    if (has_skuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skuid());
    }

    // optional double productPrice = 2;
    if (has_productprice()) {
      total_size += 1 + 8;
    }

    // optional int32 productQty = 3;
    if (has_productqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productqty());
    }

    // optional int32 returnQty = 4;
    if (has_returnqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnqty());
    }

    // optional string productMainUrl = 5;
    if (has_productmainurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productmainurl());
    }

    // optional string sourceUrl = 6;
    if (has_sourceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceurl());
    }

    // optional string color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional double aprnPromote = 10;
    if (has_aprnpromote()) {
      total_size += 1 + 8;
    }

    // optional double aprnVoucher = 11;
    if (has_aprnvoucher()) {
      total_size += 1 + 8;
    }

    // optional double shippingTax = 12;
    if (has_shippingtax()) {
      total_size += 1 + 8;
    }

    // optional double origPrice = 13;
    if (has_origprice()) {
      total_size += 1 + 8;
    }

    // optional double aprnPoint = 14;
    if (has_aprnpoint()) {
      total_size += 1 + 8;
    }

    // optional double aprnPointPrice = 15;
    if (has_aprnpointprice()) {
      total_size += 1 + 8;
    }

    // optional double aprnCash = 16;
    if (has_aprncash()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double refundablePrice = 17;
    if (has_refundableprice()) {
      total_size += 2 + 8;
    }

    // optional string productName = 18;
    if (has_productname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }

    // optional string rssSeq = 19;
    if (has_rssseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rssseq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnGoodsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReturnGoodsInfo*>(&from));
}

void ReturnGoodsInfo::MergeFrom(const ReturnGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skuid()) {
      set_skuid(from.skuid());
    }
    if (from.has_productprice()) {
      set_productprice(from.productprice());
    }
    if (from.has_productqty()) {
      set_productqty(from.productqty());
    }
    if (from.has_returnqty()) {
      set_returnqty(from.returnqty());
    }
    if (from.has_productmainurl()) {
      set_productmainurl(from.productmainurl());
    }
    if (from.has_sourceurl()) {
      set_sourceurl(from.sourceurl());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_aprnpromote()) {
      set_aprnpromote(from.aprnpromote());
    }
    if (from.has_aprnvoucher()) {
      set_aprnvoucher(from.aprnvoucher());
    }
    if (from.has_shippingtax()) {
      set_shippingtax(from.shippingtax());
    }
    if (from.has_origprice()) {
      set_origprice(from.origprice());
    }
    if (from.has_aprnpoint()) {
      set_aprnpoint(from.aprnpoint());
    }
    if (from.has_aprnpointprice()) {
      set_aprnpointprice(from.aprnpointprice());
    }
    if (from.has_aprncash()) {
      set_aprncash(from.aprncash());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_refundableprice()) {
      set_refundableprice(from.refundableprice());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_rssseq()) {
      set_rssseq(from.rssseq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReturnGoodsInfo::CopyFrom(const ReturnGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnGoodsInfo::IsInitialized() const {

  return true;
}

void ReturnGoodsInfo::Swap(ReturnGoodsInfo* other) {
  if (other != this) {
    std::swap(skuid_, other->skuid_);
    std::swap(productprice_, other->productprice_);
    std::swap(productqty_, other->productqty_);
    std::swap(returnqty_, other->returnqty_);
    std::swap(productmainurl_, other->productmainurl_);
    std::swap(sourceurl_, other->sourceurl_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(reason_, other->reason_);
    std::swap(aprnpromote_, other->aprnpromote_);
    std::swap(aprnvoucher_, other->aprnvoucher_);
    std::swap(shippingtax_, other->shippingtax_);
    std::swap(origprice_, other->origprice_);
    std::swap(aprnpoint_, other->aprnpoint_);
    std::swap(aprnpointprice_, other->aprnpointprice_);
    std::swap(aprncash_, other->aprncash_);
    std::swap(refundableprice_, other->refundableprice_);
    std::swap(productname_, other->productname_);
    std::swap(rssseq_, other->rssseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReturnGoodsInfo::GetTypeName() const {
  return "ReturnGoodsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnOrder::kRsSeqFieldNumber;
const int ReturnOrder::kOgNoFieldNumber;
const int ReturnOrder::kOgsSeqFieldNumber;
const int ReturnOrder::kApplyDateFieldNumber;
const int ReturnOrder::kApplyPriceFieldNumber;
const int ReturnOrder::kMerchantIdFieldNumber;
const int ReturnOrder::kMemGuidFieldNumber;
const int ReturnOrder::kBuyernameFieldNumber;
const int ReturnOrder::kGoodslistFieldNumber;
#endif  // !_MSC_VER

ReturnOrder::ReturnOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReturnOrder)
}

void ReturnOrder::InitAsDefaultInstance() {
}

ReturnOrder::ReturnOrder(const ReturnOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReturnOrder)
}

void ReturnOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogsseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applyprice_ = 0;
  merchantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnOrder::~ReturnOrder() {
  // @@protoc_insertion_point(destructor:ReturnOrder)
  SharedDtor();
}

void ReturnOrder::SharedDtor() {
  if (rsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rsseq_;
  }
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogsseq_;
  }
  if (applydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applydate_;
  }
  if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete merchantid_;
  }
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReturnOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReturnOrder& ReturnOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

ReturnOrder* ReturnOrder::default_instance_ = NULL;

ReturnOrder* ReturnOrder::New() const {
  return new ReturnOrder;
}

void ReturnOrder::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_rsseq()) {
      if (rsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rsseq_->clear();
      }
    }
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogsseq()) {
      if (ogsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogsseq_->clear();
      }
    }
    if (has_applydate()) {
      if (applydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        applydate_->clear();
      }
    }
    applyprice_ = 0;
    if (has_merchantid()) {
      if (merchantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        merchantid_->clear();
      }
    }
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_buyername()) {
      if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyername_->clear();
      }
    }
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReturnOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ReturnOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rsSeq = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogNo;
        break;
      }

      // optional string ogNo = 2;
      case 2: {
        if (tag == 18) {
         parse_ogNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ogsSeq;
        break;
      }

      // optional string ogsSeq = 3;
      case 3: {
        if (tag == 26) {
         parse_ogsSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogsseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_applyDate;
        break;
      }

      // optional string applyDate = 4;
      case 4: {
        if (tag == 34) {
         parse_applyDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applydate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_applyPrice;
        break;
      }

      // optional double applyPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_applyPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &applyprice_)));
          set_has_applyprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_merchantId;
        break;
      }

      // optional string merchantId = 6;
      case 6: {
        if (tag == 50) {
         parse_merchantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchantid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_memGuid;
        break;
      }

      // optional string memGuid = 7;
      case 7: {
        if (tag == 58) {
         parse_memGuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_buyername;
        break;
      }

      // optional string buyername = 8;
      case 8: {
        if (tag == 66) {
         parse_buyername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        break;
      }

      // repeated .ReturnGoodsInfo goodslist = 25;
      case 25: {
        if (tag == 202) {
         parse_goodslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_goodslist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReturnOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReturnOrder)
  return false;
#undef DO_
}

void ReturnOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReturnOrder)
  // optional string rsSeq = 1;
  if (has_rsseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rsseq(), output);
  }

  // optional string ogNo = 2;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogno(), output);
  }

  // optional string ogsSeq = 3;
  if (has_ogsseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ogsseq(), output);
  }

  // optional string applyDate = 4;
  if (has_applydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->applydate(), output);
  }

  // optional double applyPrice = 5;
  if (has_applyprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->applyprice(), output);
  }

  // optional string merchantId = 6;
  if (has_merchantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->merchantid(), output);
  }

  // optional string memGuid = 7;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->memguid(), output);
  }

  // optional string buyername = 8;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->buyername(), output);
  }

  // repeated .ReturnGoodsInfo goodslist = 25;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->goodslist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ReturnOrder)
}

int ReturnOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rsSeq = 1;
    if (has_rsseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsseq());
    }

    // optional string ogNo = 2;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogsSeq = 3;
    if (has_ogsseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogsseq());
    }

    // optional string applyDate = 4;
    if (has_applydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applydate());
    }

    // optional double applyPrice = 5;
    if (has_applyprice()) {
      total_size += 1 + 8;
    }

    // optional string merchantId = 6;
    if (has_merchantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merchantid());
    }

    // optional string memGuid = 7;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string buyername = 8;
    if (has_buyername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyername());
    }

  }
  // repeated .ReturnGoodsInfo goodslist = 25;
  total_size += 2 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReturnOrder*>(&from));
}

void ReturnOrder::MergeFrom(const ReturnOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsseq()) {
      set_rsseq(from.rsseq());
    }
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogsseq()) {
      set_ogsseq(from.ogsseq());
    }
    if (from.has_applydate()) {
      set_applydate(from.applydate());
    }
    if (from.has_applyprice()) {
      set_applyprice(from.applyprice());
    }
    if (from.has_merchantid()) {
      set_merchantid(from.merchantid());
    }
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_buyername()) {
      set_buyername(from.buyername());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReturnOrder::CopyFrom(const ReturnOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnOrder::IsInitialized() const {

  return true;
}

void ReturnOrder::Swap(ReturnOrder* other) {
  if (other != this) {
    std::swap(rsseq_, other->rsseq_);
    std::swap(ogno_, other->ogno_);
    std::swap(ogsseq_, other->ogsseq_);
    std::swap(applydate_, other->applydate_);
    std::swap(applyprice_, other->applyprice_);
    std::swap(merchantid_, other->merchantid_);
    std::swap(memguid_, other->memguid_);
    std::swap(buyername_, other->buyername_);
    goodslist_.Swap(&other->goodslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReturnOrder::GetTypeName() const {
  return "ReturnOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPushInd::kMpTypeFieldNumber;
const int MsgPushInd::kMpDataFieldNumber;
#endif  // !_MSC_VER

MsgPushInd::MsgPushInd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPushInd)
}

void MsgPushInd::InitAsDefaultInstance() {
}

MsgPushInd::MsgPushInd(const MsgPushInd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPushInd)
}

void MsgPushInd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mptype_ = 1;
  mpdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPushInd::~MsgPushInd() {
  // @@protoc_insertion_point(destructor:MsgPushInd)
  SharedDtor();
}

void MsgPushInd::SharedDtor() {
  if (mpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mpdata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgPushInd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgPushInd& MsgPushInd::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

MsgPushInd* MsgPushInd::default_instance_ = NULL;

MsgPushInd* MsgPushInd::New() const {
  return new MsgPushInd;
}

void MsgPushInd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mptype_ = 1;
    if (has_mpdata()) {
      if (mpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mpdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgPushInd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgPushInd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EuMsgPush mpType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EuMsgPush_IsValid(value)) {
            set_mptype(static_cast< ::EuMsgPush >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mpData;
        break;
      }

      // required bytes mpData = 2;
      case 2: {
        if (tag == 18) {
         parse_mpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mpdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPushInd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPushInd)
  return false;
#undef DO_
}

void MsgPushInd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPushInd)
  // required .EuMsgPush mpType = 1;
  if (has_mptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mptype(), output);
  }

  // required bytes mpData = 2;
  if (has_mpdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mpdata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgPushInd)
}

int MsgPushInd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EuMsgPush mpType = 1;
    if (has_mptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mptype());
    }

    // required bytes mpData = 2;
    if (has_mpdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mpdata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPushInd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgPushInd*>(&from));
}

void MsgPushInd::MergeFrom(const MsgPushInd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mptype()) {
      set_mptype(from.mptype());
    }
    if (from.has_mpdata()) {
      set_mpdata(from.mpdata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgPushInd::CopyFrom(const MsgPushInd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPushInd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgPushInd::Swap(MsgPushInd* other) {
  if (other != this) {
    std::swap(mptype_, other->mptype_);
    std::swap(mpdata_, other->mpdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgPushInd::GetTypeName() const {
  return "MsgPushInd";
}


// ===================================================================

#ifndef _MSC_VER
const int csTeamInfoReq::kCsIdFieldNumber;
#endif  // !_MSC_VER

csTeamInfoReq::csTeamInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csTeamInfoReq)
}

void csTeamInfoReq::InitAsDefaultInstance() {
}

csTeamInfoReq::csTeamInfoReq(const csTeamInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csTeamInfoReq)
}

void csTeamInfoReq::SharedCtor() {
  _cached_size_ = 0;
  csid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTeamInfoReq::~csTeamInfoReq() {
  // @@protoc_insertion_point(destructor:csTeamInfoReq)
  SharedDtor();
}

void csTeamInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void csTeamInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const csTeamInfoReq& csTeamInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

csTeamInfoReq* csTeamInfoReq::default_instance_ = NULL;

csTeamInfoReq* csTeamInfoReq::New() const {
  return new csTeamInfoReq;
}

void csTeamInfoReq::Clear() {
  csid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool csTeamInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:csTeamInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 csId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csTeamInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csTeamInfoReq)
  return false;
#undef DO_
}

void csTeamInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csTeamInfoReq)
  // required int32 csId = 1;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->csid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:csTeamInfoReq)
}

int csTeamInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 csId = 1;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTeamInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const csTeamInfoReq*>(&from));
}

void csTeamInfoReq::MergeFrom(const csTeamInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_csid()) {
      set_csid(from.csid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void csTeamInfoReq::CopyFrom(const csTeamInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTeamInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void csTeamInfoReq::Swap(csTeamInfoReq* other) {
  if (other != this) {
    std::swap(csid_, other->csid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string csTeamInfoReq::GetTypeName() const {
  return "csTeamInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int csTeamInfo::kCsTeamidFieldNumber;
const int csTeamInfo::kCsQueueLengthFieldNumber;
#endif  // !_MSC_VER

csTeamInfo::csTeamInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csTeamInfo)
}

void csTeamInfo::InitAsDefaultInstance() {
}

csTeamInfo::csTeamInfo(const csTeamInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csTeamInfo)
}

void csTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  csteamid_ = 0;
  csqueuelength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTeamInfo::~csTeamInfo() {
  // @@protoc_insertion_point(destructor:csTeamInfo)
  SharedDtor();
}

void csTeamInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void csTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const csTeamInfo& csTeamInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

csTeamInfo* csTeamInfo::default_instance_ = NULL;

csTeamInfo* csTeamInfo::New() const {
  return new csTeamInfo;
}

void csTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(csteamid_, csqueuelength_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool csTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:csTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 csTeamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csteamid_)));
          set_has_csteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_csQueueLength;
        break;
      }

      // required int32 csQueueLength = 2;
      case 2: {
        if (tag == 16) {
         parse_csQueueLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csqueuelength_)));
          set_has_csqueuelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csTeamInfo)
  return false;
#undef DO_
}

void csTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csTeamInfo)
  // required int32 csTeamid = 1;
  if (has_csteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->csteamid(), output);
  }

  // required int32 csQueueLength = 2;
  if (has_csqueuelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->csqueuelength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:csTeamInfo)
}

int csTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 csTeamid = 1;
    if (has_csteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csteamid());
    }

    // required int32 csQueueLength = 2;
    if (has_csqueuelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csqueuelength());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTeamInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const csTeamInfo*>(&from));
}

void csTeamInfo::MergeFrom(const csTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_csteamid()) {
      set_csteamid(from.csteamid());
    }
    if (from.has_csqueuelength()) {
      set_csqueuelength(from.csqueuelength());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void csTeamInfo::CopyFrom(const csTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csTeamInfo::Swap(csTeamInfo* other) {
  if (other != this) {
    std::swap(csteamid_, other->csteamid_);
    std::swap(csqueuelength_, other->csqueuelength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string csTeamInfo::GetTypeName() const {
  return "csTeamInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int csTeamInfoAck::kRetFieldNumber;
const int csTeamInfoAck::kCsIdFieldNumber;
const int csTeamInfoAck::kTeaminfoFieldNumber;
#endif  // !_MSC_VER

csTeamInfoAck::csTeamInfoAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csTeamInfoAck)
}

void csTeamInfoAck::InitAsDefaultInstance() {
}

csTeamInfoAck::csTeamInfoAck(const csTeamInfoAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csTeamInfoAck)
}

void csTeamInfoAck::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  csid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTeamInfoAck::~csTeamInfoAck() {
  // @@protoc_insertion_point(destructor:csTeamInfoAck)
  SharedDtor();
}

void csTeamInfoAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void csTeamInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const csTeamInfoAck& csTeamInfoAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

csTeamInfoAck* csTeamInfoAck::default_instance_ = NULL;

csTeamInfoAck* csTeamInfoAck::New() const {
  return new csTeamInfoAck;
}

void csTeamInfoAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csTeamInfoAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ret_, csid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool csTeamInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:csTeamInfoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_csId;
        break;
      }

      // required int32 csId = 2;
      case 2: {
        if (tag == 16) {
         parse_csId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        break;
      }

      // repeated .csTeamInfo teaminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csTeamInfoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csTeamInfoAck)
  return false;
#undef DO_
}

void csTeamInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csTeamInfoAck)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 csId = 2;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->csid(), output);
  }

  // repeated .csTeamInfo teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->teaminfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:csTeamInfoAck)
}

int csTeamInfoAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 csId = 2;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

  }
  // repeated .csTeamInfo teaminfo = 3;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTeamInfoAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const csTeamInfoAck*>(&from));
}

void csTeamInfoAck::MergeFrom(const csTeamInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void csTeamInfoAck::CopyFrom(const csTeamInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTeamInfoAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->teaminfo())) return false;
  return true;
}

void csTeamInfoAck::Swap(csTeamInfoAck* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(csid_, other->csid_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string csTeamInfoAck::GetTypeName() const {
  return "csTeamInfoAck";
}


// ===================================================================

#ifndef _MSC_VER
const int csTeamQueueInfo::kRetFieldNumber;
const int csTeamQueueInfo::kCsTeamIdFieldNumber;
const int csTeamQueueInfo::kCsQueueLengthFieldNumber;
#endif  // !_MSC_VER

csTeamQueueInfo::csTeamQueueInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csTeamQueueInfo)
}

void csTeamQueueInfo::InitAsDefaultInstance() {
}

csTeamQueueInfo::csTeamQueueInfo(const csTeamQueueInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csTeamQueueInfo)
}

void csTeamQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  csteamid_ = 0;
  csqueuelength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csTeamQueueInfo::~csTeamQueueInfo() {
  // @@protoc_insertion_point(destructor:csTeamQueueInfo)
  SharedDtor();
}

void csTeamQueueInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void csTeamQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const csTeamQueueInfo& csTeamQueueInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_improtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_improtocol_2eproto();
#endif
  return *default_instance_;
}

csTeamQueueInfo* csTeamQueueInfo::default_instance_ = NULL;

csTeamQueueInfo* csTeamQueueInfo::New() const {
  return new csTeamQueueInfo;
}

void csTeamQueueInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csTeamQueueInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ret_, csqueuelength_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool csTeamQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:csTeamQueueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_csTeamId;
        break;
      }

      // required int32 csTeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_csTeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csteamid_)));
          set_has_csteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_csQueueLength;
        break;
      }

      // required int32 csQueueLength = 3;
      case 3: {
        if (tag == 24) {
         parse_csQueueLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csqueuelength_)));
          set_has_csqueuelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csTeamQueueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csTeamQueueInfo)
  return false;
#undef DO_
}

void csTeamQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csTeamQueueInfo)
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 csTeamId = 2;
  if (has_csteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->csteamid(), output);
  }

  // required int32 csQueueLength = 3;
  if (has_csqueuelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->csqueuelength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:csTeamQueueInfo)
}

int csTeamQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 csTeamId = 2;
    if (has_csteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csteamid());
    }

    // required int32 csQueueLength = 3;
    if (has_csqueuelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csqueuelength());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csTeamQueueInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const csTeamQueueInfo*>(&from));
}

void csTeamQueueInfo::MergeFrom(const csTeamQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_csteamid()) {
      set_csteamid(from.csteamid());
    }
    if (from.has_csqueuelength()) {
      set_csqueuelength(from.csqueuelength());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void csTeamQueueInfo::CopyFrom(const csTeamQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csTeamQueueInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csTeamQueueInfo::Swap(csTeamQueueInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(csteamid_, other->csteamid_);
    std::swap(csqueuelength_, other->csqueuelength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string csTeamQueueInfo::GetTypeName() const {
  return "csTeamQueueInfo";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
