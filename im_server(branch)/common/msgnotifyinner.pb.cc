// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgnotifyinner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgnotifyinner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_msgnotifyinner_2eproto() {
  delete KfkNewOrder::default_instance_;
  delete KfkPayOrder::default_instance_;
  delete KfkGoodsComment::default_instance_;
  delete KfkReturnOrder::default_instance_;
  delete MsgPushInner::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_msgnotifyinner_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_msgnotifyinner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_base_2eproto();
  KfkNewOrder::default_instance_ = new KfkNewOrder();
  KfkPayOrder::default_instance_ = new KfkPayOrder();
  KfkGoodsComment::default_instance_ = new KfkGoodsComment();
  KfkReturnOrder::default_instance_ = new KfkReturnOrder();
  MsgPushInner::default_instance_ = new MsgPushInner();
  KfkNewOrder::default_instance_->InitAsDefaultInstance();
  KfkPayOrder::default_instance_->InitAsDefaultInstance();
  KfkGoodsComment::default_instance_->InitAsDefaultInstance();
  KfkReturnOrder::default_instance_->InitAsDefaultInstance();
  MsgPushInner::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgnotifyinner_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_msgnotifyinner_2eproto_once_);
void protobuf_AddDesc_msgnotifyinner_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_msgnotifyinner_2eproto_once_,
                 &protobuf_AddDesc_msgnotifyinner_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgnotifyinner_2eproto {
  StaticDescriptorInitializer_msgnotifyinner_2eproto() {
    protobuf_AddDesc_msgnotifyinner_2eproto();
  }
} static_descriptor_initializer_msgnotifyinner_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int KfkNewOrder::kMemguidFieldNumber;
const int KfkNewOrder::kOgnoFieldNumber;
const int KfkNewOrder::kOgseqFieldNumber;
#endif  // !_MSC_VER

KfkNewOrder::KfkNewOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KfkNewOrder)
}

void KfkNewOrder::InitAsDefaultInstance() {
}

KfkNewOrder::KfkNewOrder(const KfkNewOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KfkNewOrder)
}

void KfkNewOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KfkNewOrder::~KfkNewOrder() {
  // @@protoc_insertion_point(destructor:KfkNewOrder)
  SharedDtor();
}

void KfkNewOrder::SharedDtor() {
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KfkNewOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KfkNewOrder& KfkNewOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgnotifyinner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgnotifyinner_2eproto();
#endif
  return *default_instance_;
}

KfkNewOrder* KfkNewOrder::default_instance_ = NULL;

KfkNewOrder* KfkNewOrder::New() const {
  return new KfkNewOrder;
}

void KfkNewOrder::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool KfkNewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:KfkNewOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string memguid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogno;
        break;
      }

      // optional string ogno = 2;
      case 2: {
        if (tag == 18) {
         parse_ogno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ogseq;
        break;
      }

      // optional string ogseq = 3;
      case 3: {
        if (tag == 26) {
         parse_ogseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KfkNewOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KfkNewOrder)
  return false;
#undef DO_
}

void KfkNewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KfkNewOrder)
  // optional string memguid = 1;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->memguid(), output);
  }

  // optional string ogno = 2;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogno(), output);
  }

  // optional string ogseq = 3;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ogseq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:KfkNewOrder)
}

int KfkNewOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string memguid = 1;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string ogno = 2;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogseq = 3;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KfkNewOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KfkNewOrder*>(&from));
}

void KfkNewOrder::MergeFrom(const KfkNewOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void KfkNewOrder::CopyFrom(const KfkNewOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KfkNewOrder::IsInitialized() const {

  return true;
}

void KfkNewOrder::Swap(KfkNewOrder* other) {
  if (other != this) {
    std::swap(memguid_, other->memguid_);
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KfkNewOrder::GetTypeName() const {
  return "KfkNewOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int KfkPayOrder::kMemguidFieldNumber;
const int KfkPayOrder::kOgnoFieldNumber;
const int KfkPayOrder::kOgseqFieldNumber;
const int KfkPayOrder::kPaytypeFieldNumber;
const int KfkPayOrder::kTransnoFieldNumber;
#endif  // !_MSC_VER

KfkPayOrder::KfkPayOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KfkPayOrder)
}

void KfkPayOrder::InitAsDefaultInstance() {
}

KfkPayOrder::KfkPayOrder(const KfkPayOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KfkPayOrder)
}

void KfkPayOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KfkPayOrder::~KfkPayOrder() {
  // @@protoc_insertion_point(destructor:KfkPayOrder)
  SharedDtor();
}

void KfkPayOrder::SharedDtor() {
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paytype_;
  }
  if (transno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transno_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KfkPayOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KfkPayOrder& KfkPayOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgnotifyinner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgnotifyinner_2eproto();
#endif
  return *default_instance_;
}

KfkPayOrder* KfkPayOrder::default_instance_ = NULL;

KfkPayOrder* KfkPayOrder::New() const {
  return new KfkPayOrder;
}

void KfkPayOrder::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        paytype_->clear();
      }
    }
    if (has_transno()) {
      if (transno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transno_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool KfkPayOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:KfkPayOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string memguid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogno;
        break;
      }

      // optional string ogno = 2;
      case 2: {
        if (tag == 18) {
         parse_ogno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ogseq;
        break;
      }

      // optional string ogseq = 3;
      case 3: {
        if (tag == 26) {
         parse_ogseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_paytype;
        break;
      }

      // optional string paytype = 4;
      case 4: {
        if (tag == 34) {
         parse_paytype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transno;
        break;
      }

      // optional string transno = 5;
      case 5: {
        if (tag == 42) {
         parse_transno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KfkPayOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KfkPayOrder)
  return false;
#undef DO_
}

void KfkPayOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KfkPayOrder)
  // optional string memguid = 1;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->memguid(), output);
  }

  // optional string ogno = 2;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogno(), output);
  }

  // optional string ogseq = 3;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ogseq(), output);
  }

  // optional string paytype = 4;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->paytype(), output);
  }

  // optional string transno = 5;
  if (has_transno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->transno(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:KfkPayOrder)
}

int KfkPayOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string memguid = 1;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string ogno = 2;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogseq = 3;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

    // optional string paytype = 4;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

    // optional string transno = 5;
    if (has_transno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transno());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KfkPayOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KfkPayOrder*>(&from));
}

void KfkPayOrder::MergeFrom(const KfkPayOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_transno()) {
      set_transno(from.transno());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void KfkPayOrder::CopyFrom(const KfkPayOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KfkPayOrder::IsInitialized() const {

  return true;
}

void KfkPayOrder::Swap(KfkPayOrder* other) {
  if (other != this) {
    std::swap(memguid_, other->memguid_);
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(paytype_, other->paytype_);
    std::swap(transno_, other->transno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KfkPayOrder::GetTypeName() const {
  return "KfkPayOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int KfkGoodsComment::kMemguidFieldNumber;
const int KfkGoodsComment::kOgnoFieldNumber;
const int KfkGoodsComment::kBugernameFieldNumber;
const int KfkGoodsComment::kEvaluatelevelFieldNumber;
const int KfkGoodsComment::kEvaluatecontextFieldNumber;
const int KfkGoodsComment::kSkuidFieldNumber;
#endif  // !_MSC_VER

KfkGoodsComment::KfkGoodsComment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KfkGoodsComment)
}

void KfkGoodsComment::InitAsDefaultInstance() {
}

KfkGoodsComment::KfkGoodsComment(const KfkGoodsComment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KfkGoodsComment)
}

void KfkGoodsComment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bugername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluatelevel_ = 0;
  evaluatecontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KfkGoodsComment::~KfkGoodsComment() {
  // @@protoc_insertion_point(destructor:KfkGoodsComment)
  SharedDtor();
}

void KfkGoodsComment::SharedDtor() {
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (bugername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bugername_;
  }
  if (evaluatecontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete evaluatecontext_;
  }
  if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skuid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KfkGoodsComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KfkGoodsComment& KfkGoodsComment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgnotifyinner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgnotifyinner_2eproto();
#endif
  return *default_instance_;
}

KfkGoodsComment* KfkGoodsComment::default_instance_ = NULL;

KfkGoodsComment* KfkGoodsComment::New() const {
  return new KfkGoodsComment;
}

void KfkGoodsComment::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_bugername()) {
      if (bugername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bugername_->clear();
      }
    }
    evaluatelevel_ = 0;
    if (has_evaluatecontext()) {
      if (evaluatecontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        evaluatecontext_->clear();
      }
    }
    if (has_skuid()) {
      if (skuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool KfkGoodsComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:KfkGoodsComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string memguid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogno;
        break;
      }

      // optional string ogno = 2;
      case 2: {
        if (tag == 18) {
         parse_ogno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bugername;
        break;
      }

      // optional string bugername = 3;
      case 3: {
        if (tag == 26) {
         parse_bugername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bugername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_evaluatelevel;
        break;
      }

      // optional double evaluatelevel = 4;
      case 4: {
        if (tag == 33) {
         parse_evaluatelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evaluatelevel_)));
          set_has_evaluatelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_evaluatecontext;
        break;
      }

      // optional string evaluatecontext = 5;
      case 5: {
        if (tag == 42) {
         parse_evaluatecontext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_evaluatecontext()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_skuid;
        break;
      }

      // optional string skuid = 6;
      case 6: {
        if (tag == 50) {
         parse_skuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KfkGoodsComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KfkGoodsComment)
  return false;
#undef DO_
}

void KfkGoodsComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KfkGoodsComment)
  // optional string memguid = 1;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->memguid(), output);
  }

  // optional string ogno = 2;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogno(), output);
  }

  // optional string bugername = 3;
  if (has_bugername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bugername(), output);
  }

  // optional double evaluatelevel = 4;
  if (has_evaluatelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->evaluatelevel(), output);
  }

  // optional string evaluatecontext = 5;
  if (has_evaluatecontext()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->evaluatecontext(), output);
  }

  // optional string skuid = 6;
  if (has_skuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->skuid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:KfkGoodsComment)
}

int KfkGoodsComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string memguid = 1;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string ogno = 2;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string bugername = 3;
    if (has_bugername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bugername());
    }

    // optional double evaluatelevel = 4;
    if (has_evaluatelevel()) {
      total_size += 1 + 8;
    }

    // optional string evaluatecontext = 5;
    if (has_evaluatecontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->evaluatecontext());
    }

    // optional string skuid = 6;
    if (has_skuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skuid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KfkGoodsComment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KfkGoodsComment*>(&from));
}

void KfkGoodsComment::MergeFrom(const KfkGoodsComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_bugername()) {
      set_bugername(from.bugername());
    }
    if (from.has_evaluatelevel()) {
      set_evaluatelevel(from.evaluatelevel());
    }
    if (from.has_evaluatecontext()) {
      set_evaluatecontext(from.evaluatecontext());
    }
    if (from.has_skuid()) {
      set_skuid(from.skuid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void KfkGoodsComment::CopyFrom(const KfkGoodsComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KfkGoodsComment::IsInitialized() const {

  return true;
}

void KfkGoodsComment::Swap(KfkGoodsComment* other) {
  if (other != this) {
    std::swap(memguid_, other->memguid_);
    std::swap(ogno_, other->ogno_);
    std::swap(bugername_, other->bugername_);
    std::swap(evaluatelevel_, other->evaluatelevel_);
    std::swap(evaluatecontext_, other->evaluatecontext_);
    std::swap(skuid_, other->skuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KfkGoodsComment::GetTypeName() const {
  return "KfkGoodsComment";
}


// ===================================================================

#ifndef _MSC_VER
const int KfkReturnOrder::kMemGuidFieldNumber;
const int KfkReturnOrder::kOgNoFieldNumber;
const int KfkReturnOrder::kOgSeqFieldNumber;
const int KfkReturnOrder::kOgsSeqFieldNumber;
const int KfkReturnOrder::kRsSeqFieldNumber;
#endif  // !_MSC_VER

KfkReturnOrder::KfkReturnOrder()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KfkReturnOrder)
}

void KfkReturnOrder::InitAsDefaultInstance() {
}

KfkReturnOrder::KfkReturnOrder(const KfkReturnOrder& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KfkReturnOrder)
}

void KfkReturnOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogno_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ogsseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KfkReturnOrder::~KfkReturnOrder() {
  // @@protoc_insertion_point(destructor:KfkReturnOrder)
  SharedDtor();
}

void KfkReturnOrder::SharedDtor() {
  if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memguid_;
  }
  if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogno_;
  }
  if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogseq_;
  }
  if (ogsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogsseq_;
  }
  if (rsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rsseq_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KfkReturnOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KfkReturnOrder& KfkReturnOrder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgnotifyinner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgnotifyinner_2eproto();
#endif
  return *default_instance_;
}

KfkReturnOrder* KfkReturnOrder::default_instance_ = NULL;

KfkReturnOrder* KfkReturnOrder::New() const {
  return new KfkReturnOrder;
}

void KfkReturnOrder::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_memguid()) {
      if (memguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memguid_->clear();
      }
    }
    if (has_ogno()) {
      if (ogno_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogno_->clear();
      }
    }
    if (has_ogseq()) {
      if (ogseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogseq_->clear();
      }
    }
    if (has_ogsseq()) {
      if (ogsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ogsseq_->clear();
      }
    }
    if (has_rsseq()) {
      if (rsseq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rsseq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool KfkReturnOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:KfkReturnOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string memGuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memguid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ogNo;
        break;
      }

      // optional string ogNo = 2;
      case 2: {
        if (tag == 18) {
         parse_ogNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ogSeq;
        break;
      }

      // optional string ogSeq = 3;
      case 3: {
        if (tag == 26) {
         parse_ogSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ogsSeq;
        break;
      }

      // optional string ogsSeq = 4;
      case 4: {
        if (tag == 34) {
         parse_ogsSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ogsseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rsSeq;
        break;
      }

      // optional string rsSeq = 5;
      case 5: {
        if (tag == 42) {
         parse_rsSeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsseq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KfkReturnOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KfkReturnOrder)
  return false;
#undef DO_
}

void KfkReturnOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KfkReturnOrder)
  // optional string memGuid = 1;
  if (has_memguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->memguid(), output);
  }

  // optional string ogNo = 2;
  if (has_ogno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ogno(), output);
  }

  // optional string ogSeq = 3;
  if (has_ogseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ogseq(), output);
  }

  // optional string ogsSeq = 4;
  if (has_ogsseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ogsseq(), output);
  }

  // optional string rsSeq = 5;
  if (has_rsseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rsseq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:KfkReturnOrder)
}

int KfkReturnOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string memGuid = 1;
    if (has_memguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memguid());
    }

    // optional string ogNo = 2;
    if (has_ogno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogno());
    }

    // optional string ogSeq = 3;
    if (has_ogseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogseq());
    }

    // optional string ogsSeq = 4;
    if (has_ogsseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ogsseq());
    }

    // optional string rsSeq = 5;
    if (has_rsseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsseq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KfkReturnOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KfkReturnOrder*>(&from));
}

void KfkReturnOrder::MergeFrom(const KfkReturnOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memguid()) {
      set_memguid(from.memguid());
    }
    if (from.has_ogno()) {
      set_ogno(from.ogno());
    }
    if (from.has_ogseq()) {
      set_ogseq(from.ogseq());
    }
    if (from.has_ogsseq()) {
      set_ogsseq(from.ogsseq());
    }
    if (from.has_rsseq()) {
      set_rsseq(from.rsseq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void KfkReturnOrder::CopyFrom(const KfkReturnOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KfkReturnOrder::IsInitialized() const {

  return true;
}

void KfkReturnOrder::Swap(KfkReturnOrder* other) {
  if (other != this) {
    std::swap(memguid_, other->memguid_);
    std::swap(ogno_, other->ogno_);
    std::swap(ogseq_, other->ogseq_);
    std::swap(ogsseq_, other->ogsseq_);
    std::swap(rsseq_, other->rsseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KfkReturnOrder::GetTypeName() const {
  return "KfkReturnOrder";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPushInner::kMpTypeFieldNumber;
const int MsgPushInner::kMpDataFieldNumber;
#endif  // !_MSC_VER

MsgPushInner::MsgPushInner()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPushInner)
}

void MsgPushInner::InitAsDefaultInstance() {
}

MsgPushInner::MsgPushInner(const MsgPushInner& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPushInner)
}

void MsgPushInner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mptype_ = 1;
  mpdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPushInner::~MsgPushInner() {
  // @@protoc_insertion_point(destructor:MsgPushInner)
  SharedDtor();
}

void MsgPushInner::SharedDtor() {
  if (mpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mpdata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgPushInner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgPushInner& MsgPushInner::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_msgnotifyinner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_msgnotifyinner_2eproto();
#endif
  return *default_instance_;
}

MsgPushInner* MsgPushInner::default_instance_ = NULL;

MsgPushInner* MsgPushInner::New() const {
  return new MsgPushInner;
}

void MsgPushInner::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mptype_ = 1;
    if (has_mpdata()) {
      if (mpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mpdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgPushInner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:MsgPushInner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EuMsgPush mpType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EuMsgPush_IsValid(value)) {
            set_mptype(static_cast< ::EuMsgPush >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mpData;
        break;
      }

      // required bytes mpData = 2;
      case 2: {
        if (tag == 18) {
         parse_mpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mpdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPushInner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPushInner)
  return false;
#undef DO_
}

void MsgPushInner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPushInner)
  // required .EuMsgPush mpType = 1;
  if (has_mptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mptype(), output);
  }

  // required bytes mpData = 2;
  if (has_mpdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mpdata(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:MsgPushInner)
}

int MsgPushInner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EuMsgPush mpType = 1;
    if (has_mptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mptype());
    }

    // required bytes mpData = 2;
    if (has_mpdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mpdata());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPushInner::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgPushInner*>(&from));
}

void MsgPushInner::MergeFrom(const MsgPushInner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mptype()) {
      set_mptype(from.mptype());
    }
    if (from.has_mpdata()) {
      set_mpdata(from.mpdata());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgPushInner::CopyFrom(const MsgPushInner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPushInner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgPushInner::Swap(MsgPushInner* other) {
  if (other != this) {
    std::swap(mptype_, other->mptype_);
    std::swap(mpdata_, other->mpdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgPushInner::GetTypeName() const {
  return "MsgPushInner";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
