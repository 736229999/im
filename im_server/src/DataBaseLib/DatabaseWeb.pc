#include "stdafx.h"

#define SQLCA_NONE 
#define ORACA_NONE
#include <sqlcpr.h>
#include <string>

#include "DatabaseWeb.h"
#include <sqlda.h>

#include <openssl/aes.h> 
#include "Function.h"

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE ORACA;

EXEC ORACLE OPTION (RELEASE_CURSOR = YES);  
EXEC ORACLE OPTION (ORACA=YES);

extern struct oraca oraca;
// SQLDA * select_des;
// SQLDA * bind_des;

extern void sqlgls(char*,size_t*,size_t *);

//线程运行上下文
EXEC SQL BEGIN DECLARE SECTION;
	extern sql_context m_ctx[ 200 ];
EXEC SQL END DECLARE SECTION;
//连接池编译选项需增加：
//CPOOL=YES CMIN=5 CMAX=20 	
//代码检验
// sqlcheck=FULL USERID=blog01/blog01@test139

CDatabaseWeb::CDatabaseWeb(void)
{

}

CDatabaseWeb::~CDatabaseWeb(void)
{

}

void CDatabaseWeb::SetConnectDB(char* uid, char* pwd, char* sid)
{
	strncpy(webuid, uid,32);
	strncpy(webpwd, pwd,32);
	strncpy(websid, sid,32);
}

//连接WEB数据库  (初始化连接名，上下文)
bool CDatabaseWeb::ConnectDB()
{
	return ConnectWeb();
}

/*================================================================ 
*
* 函 数 名：Get_UserID_PWD 
** 根据用户名获取ID与密码
* 参 数： 
* char *c_pcUserName [IN] : 用户名 
* uint32 &iUserID [[IN,OUT]] : 用户ID
* char *pcPassWord [IN,OUT]: 用户密码
* 返 回 值：int -	SUCCESS: DB_SUCCESS; 用户不存在: DB_NOUSER;
* 
================================================================*/ 
int CDatabaseWeb::Get_PWD_ByID(uint32 id,char* cPass,char* username,char* mobileno)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40],var_password[60],var_mobileno[51];
		int i_userid;   
		int	retcode;
		VARCHAR db_link_name[32];
	EXEC SQL END DECLARE SECTION;

	i_userid = id;
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);

	SET_INIT_NULL(var_password);
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_mobileno);
		
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];

	int db_ret;
	int iReconnTimes;
	bool bReconn;

start:
	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserPwdByID(:i_userid,:var_password,:var_username,:var_mobileno,:retcode);
		end;
	END-EXEC;
		
	db_ret = sqlca.sqlcode;    
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (retcode == 1403 || db_ret == 1403 || db_ret == -1405)
	{
		return DB_NOUSER;
	}
	
	if (db_ret >= 0)
	{
		SET_END_NULL(var_password);
		SET_END_NULL(var_username);
		SET_END_NULL(var_mobileno);
		strncpy(cPass,(char*)var_password.arr,MAX_PASSWORD_LEN);
		strncpy(username,(char*)var_username.arr,MAX_USERNAME_LEN);
		strncpy(mobileno,(char*)var_mobileno.arr,MAX_PHONE_LEN);
		if (retcode == DB_NOACTIVE)
			return DB_NOACTIVE;
		else
			return DB_SUCCESS;
	}

	char szError[255];
	sprintf(szError, "Get_PWD_ByID() ID:%d,ErrorCode:%d\n",id, db_ret);
	sql_error(sqlca, oraca);
	return CError::DB_Error(DB_NOUSER, szError);
}

	int CDatabaseWeb::Get_CS_PWD(char *c_pcUserName,char *pcPassWord,uint32 &iUserID,uint8 &state)
	{
		DEF_ORASET;
		EXEC SQL BEGIN DECLARE SECTION;
			VARCHAR var_username[121],var_password[60];
			unsigned int i_userid;
			int i_state;
			int retcode;
			VARCHAR db_link_name[32];
		EXEC SQL END DECLARE SECTION;
	
		strncpy((char*)db_link_name.arr, m_Connect,32);
		db_link_name.len = (short)strlen(m_Connect);
	
		i_userid = 0;
 
		SET_INIT_NULL(var_password);
		SET_INIT_NULL(var_username);
			
		strncpy((char*)var_username.arr,c_pcUserName,MAX_USERNAME_LEN);
		var_username.len = (short)strlen((char *)var_username.arr); 
		int db_ret;
		EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
		int iReconnTimes;
		bool bReconn;
			
	start:
			
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetCSPWD(:var_username,:i_userid,:var_password,:i_state,:retcode);
			end;
		END-EXEC;
		
		db_ret = sqlca.sqlcode; 
		CLog::Log("Get_CS_PWD",CLog::TYPE_IMPORTANT,"var_username:%s,var_password:%s,i_userid:%d,i_state:%d,retcode:%d,db_ret:%d",
			var_username.arr,var_password.arr,i_userid,i_state,retcode,db_ret);
		if (conn_error(db_ret))
		{
			iReconnTimes=0;
			bReconn=ConnectDB();
			while(!bReconn)
			{
				iReconnTimes++;
				sleep(iReconnTimes%10);
				bReconn=ConnectDB();
			}
			goto start; 			
		}
	
		if (retcode == 1403 || db_ret == 1403 || db_ret == -1405)
		{
			return DB_NOUSER;
		}		
		
		if (db_ret >= 0)
		{
			iUserID = i_userid;
			state = i_state;
			SET_END_NULL(var_password);
			SET_END_NULL(var_username);
			strncpy(pcPassWord,(char*)var_password.arr,80);
			
			if (retcode == DB_NOACTIVE)
				return DB_NOACTIVE;
			return DB_SUCCESS;
		}
	
		char szError[255];
		sql_error(sqlca, oraca);
		return CError::DB_Error(DB_NOUSER, szError);
	}
int CDatabaseWeb::Get_UserID_PWD(const char *c_pcUserName,uint32 &iUserID,char *pcPassWord)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40],var_password[60];
		int i_userid;   
		int retcode;
		VARCHAR db_link_name[32];
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);

	i_userid = 0;
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(var_username);
		
	if (strlen(c_pcUserName) > 38)
		return CError::DB_Error(DB_NOUSER, (char*)c_pcUserName);
	strncpy((char*)var_username.arr,c_pcUserName,MAX_USERNAME_LEN);
	var_username.len = (short)strlen((char *)var_username.arr);
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
		
start:
		
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserPwd(:var_username,:i_userid,:var_password,:retcode);
		end;
	END-EXEC;
		
	db_ret = sqlca.sqlcode;    
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (retcode == 1403 || db_ret == 1403 || db_ret == -1405)
	{
		return DB_NOUSER;
	}		
	
	if (db_ret >= 0)
	{
		iUserID = i_userid;
		SET_END_NULL(var_password);
		strncpy(pcPassWord,(char*)var_password.arr,MAX_PASSWORD_LEN);
		if (retcode == DB_NOACTIVE)
			return DB_NOACTIVE;
		return DB_SUCCESS;
	}

	char szError[255];
	sprintf(szError, "Get_UserID_PWD() UserName:%s,ErrorCode:%d\n",c_pcUserName, db_ret);
	sql_error(sqlca, oraca);
	return CError::DB_Error(DB_NOUSER, szError);
}

int CDatabaseWeb::Get_UserID_PWD_ByMobileNo(const char *c_pcmobileno,uint32 &iUserID,char *pcPassWord,char *username)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40],var_password[60],var_mobileno[51];
		int i_userid;   
		int	retcode;
		VARCHAR db_link_name[32];
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);

	i_userid = 0;
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_mobileno);
		
	if (strlen(c_pcmobileno) > 50)
		return CError::DB_Error(DB_NOUSER, (char*)c_pcmobileno);
	strncpy((char*)var_mobileno.arr,c_pcmobileno,MAX_PHONE_LEN);
	var_mobileno.len = (short)strlen((char *)var_mobileno.arr);
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
		
start:
		
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserPwdByMobile(:var_mobileno,:var_username,:i_userid,:var_password,:retcode);
		end;
	END-EXEC;
		
	db_ret = sqlca.sqlcode;    
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (retcode == 1403 || db_ret == 1403 || db_ret == -1405)
	{
		return DB_NOUSER;
	}
	
	if (db_ret >= 0)
	{
		iUserID = i_userid;
		SET_END_NULL(var_password);
		SET_END_NULL(var_username);
		strncpy(pcPassWord,(char*)var_password.arr,MAX_PASSWORD_LEN);
		strncpy(username,(char*)var_username.arr,MAX_USERNAME_LEN);
		if (retcode == DB_NOACTIVE)
			return DB_NOACTIVE;
		return DB_SUCCESS;
	}

	char szError[255];
	sprintf(szError, "Get_UserID_PWD_ByMobileNo() MobileNO:%s,ErrorCode:%d\n",c_pcmobileno, db_ret);
	sql_error(sqlca, oraca);
	return CError::DB_Error(DB_NOUSER, szError);
}

int CDatabaseWeb::SaveAccount(char * account,char* pwd,uint32 id,char* truename)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
	int nId,retcode;
	VARCHAR var_account[80],var_password[40],db_link_name[32],var_truename[41];
	EXEC SQL END DECLARE SECTION;

	nId=id;

	SET_INIT_NULL(var_account);
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(var_truename);

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	strncpy((char*)var_account.arr,account,80-1);
	var_account.len = (short)strlen((char *)var_account.arr);

	strncpy((char*)var_password.arr,pwd,40-1);
	var_password.len = (short)strlen((char *)var_password.arr);

	strncpy((char*)var_truename.arr,truename,MAX_NICKNAME_LEN);
	var_truename.len = (short)strlen((char *)var_truename.arr);


	int db_ret;
	int iReconnTimes;
	bool bReconn;

start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.AccountSave_20150916(:nId,:var_account,:var_password,:var_truename,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	CLog::Log("SaveAccount", CLog::TYPE_DEBUG, "user:%s, db_ret:%d, retcode:%d ", account, db_ret, retcode);
		
	if (retcode == 1)
	{
		return DB_ERROR;
	}
	
	return DB_SUCCESS;
}

int CDatabaseWeb::SaveAccountBuyer(char * account,char* pwd,char* guid,uint32& id,char* mobileno,char*emailaddress,char*nickname,char*headImg)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
	int nId,retcode;
	VARCHAR var_account[80],var_password[40],db_link_name[32],var_guid[40],var_moblieno[22],var_emailaddress[42],var_nickname[41],var_headImg[101];
	EXEC SQL END DECLARE SECTION;

	SET_INIT_NULL(var_account);
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(db_link_name);
	SET_INIT_NULL(var_guid);
	SET_INIT_NULL(var_moblieno);
	SET_INIT_NULL(var_emailaddress);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_headImg);

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	strncpy((char*)var_account.arr,account,80-1);
	var_account.len = (short)strlen((char *)var_account.arr);

	strncpy((char*)var_password.arr,pwd,40-1);
	var_password.len = (short)strlen((char *)var_password.arr);

	strncpy((char*)var_guid.arr,guid,40-1);
	var_guid.len = (short)strlen((char *)var_guid.arr);
    strncpy((char*)var_moblieno.arr,mobileno,22-1);
	var_moblieno.len = (short)strlen((char *)var_moblieno.arr);

	strncpy((char*)var_emailaddress.arr,emailaddress,42-1);
	var_emailaddress.len = (short)strlen((char *)var_emailaddress.arr);
	
	strncpy((char*)var_nickname.arr,nickname,MAX_NICKNAME_LEN);
	var_nickname.len = (short)strlen((char *)var_nickname.arr);

	strncpy((char*)var_headImg.arr,headImg,MAX_HEADURL_LEN);
	var_headImg.len = (short)strlen((char *)var_headImg.arr);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;

start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.AccountSaveBuyer_20150907(:nId,:var_account,:var_password,:var_guid,:var_moblieno,:var_emailaddress,:var_nickname,:var_headImg,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	CLog::Log("SaveAccountBuyer", CLog::TYPE_DEBUG, "user:%s, db_ret:%d, retcode:%d ", account, db_ret, retcode);
		
	if (retcode == 1)
	{
		return DB_ERROR;
	}
	
	id = nId;
	
	return DB_SUCCESS;
}

int CDatabaseWeb::SaveAccountWork(char* account,char* pwd, uint32& id, char* mobileno, char* emailaddress, char*nickname, char*headImg, char*groupname)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
	int nId,retcode;
	VARCHAR var_account[80],var_password[40],db_link_name[32],var_moblieno[22],var_emailaddress[42],var_nickname[41],var_headImg[101];
	VARCHAR var_groupname[100];
	EXEC SQL END DECLARE SECTION;

	SET_INIT_NULL(var_account);
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(db_link_name);

	SET_INIT_NULL(var_moblieno);
	SET_INIT_NULL(var_emailaddress);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_headImg);	
	SET_INIT_NULL(var_groupname);
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	strncpy((char*)var_account.arr,account,80-1);
	var_account.len = (short)strlen((char *)var_account.arr);

	strncpy((char*)var_password.arr,pwd,40-1);
	var_password.len = (short)strlen((char *)var_password.arr);

    strncpy((char*)var_moblieno.arr,mobileno,22-1);
	var_moblieno.len = (short)strlen((char *)var_moblieno.arr);

	strncpy((char*)var_emailaddress.arr,emailaddress,42-1);
	var_emailaddress.len = (short)strlen((char *)var_emailaddress.arr);
	
	strncpy((char*)var_nickname.arr,nickname,MAX_NICKNAME_LEN);
	var_nickname.len = (short)strlen((char *)var_nickname.arr);

	strncpy((char*)var_headImg.arr,headImg,MAX_HEADURL_LEN);
	var_headImg.len = (short)strlen((char *)var_headImg.arr);

	strncpy((char*)var_groupname.arr,groupname,99);
	var_groupname.len = (short)strlen((char *)var_groupname.arr);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;

start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.AccountSaveWork(:nId,:var_account,:var_password,:var_moblieno,:var_emailaddress,:var_nickname,:var_headImg,:var_groupname,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	CLog::Log("SaveAccountWork", CLog::TYPE_DEBUG, "user:%s, db_ret:%d, retcode:%d ", account, db_ret, retcode);
		
	if (retcode == 1)
	{
		return DB_ERROR;
	}
	if(retcode == 2)
	{
		return DB_USERNAME_EXIST;
	}
	id = nId;
	
	return DB_SUCCESS;
}


int CDatabaseWeb::SaveSubAccount(uint32 uid,uint32 fid,uint32 groupid,char* password,char* nickname,char* truename)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
	int n_uid,n_fid,n_groupid,retcode;
	VARCHAR var_nickname[41],var_password[61],var_truename[32],db_link_name[32];
	EXEC SQL END DECLARE SECTION;

	n_uid = uid;
	n_fid = fid;
	n_groupid = groupid;

	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_password);
	SET_INIT_NULL(var_truename);
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	strncpy((char*)var_nickname.arr,nickname,MAX_NICKNAME_LEN);
	var_nickname.len = (short)strlen((char *)var_nickname.arr);

	strncpy((char*)var_password.arr,password,MAX_PASSWORD_LEN);
	var_password.len = (short)strlen((char *)var_password.arr);

	strncpy((char*)var_truename.arr,truename,32 - 1);
	var_truename.len = (short)strlen((char *)var_truename.arr);
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SubAccountSave(:n_uid,:n_fid,:n_groupid,:var_nickname,:var_password,:var_truename,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	CLog::Log("SaveAccountBuyer", CLog::TYPE_DEBUG, "id:%d, db_ret:%d, retcode:%d ", uid, db_ret, retcode);
		
	if (retcode == 1)
	{
		return DB_ERROR;
	}
	
	return DB_SUCCESS;
}

/*================================================================ 
*
* 函 数 名：Get_Basic_UserInfo 
** 根据用户ID获取用户基本信息
* 参 数：
*const uint32 requestID [IN] : 请求者的ID 
* const uint32 c_iUserID [IN] : 要查看用户ID 
* XT_GET_FRIEND_BASICINFO_NOTIFY::tagFriendInfo & st_BasicUserInfo [[IN,OUT]] : 用户基本信息结构
* 返 回 值：int -	SUCCESS: DB_SUCCESS; 用户不存在: DB_NOUSER; 操作失败: DB_ERROR;
* 
================================================================*/
int  CDatabaseWeb::Get_Basic_UserInfo(const uint32 requestID, uint32 *iUserID, XT_GET_FRIEND_BASICINFO_NOTIFY::tagFriendInfo *pBasicUserInfo, uint8 &nRetCount)
{
	nRetCount=0;
	return DB_SUCCESS;	
}

/*================================================================ 
*
* 函 数 名：Get_User_Info 
** 根据用户ID获取用户详细信息
* 参 数： 
* uint32 iUserID [IN] : 用户ID 
* XT_SERVER_USERINFO_GET_ACK *lpAck [[IN,OUT]] : 用户基本信息结构
* 返 回 值：int -	SUCCESS: DB_SUCCESS; 用户不存在: DB_NOUSER; 操作失败: DB_ERROR;
* 
================================================================*/
int CDatabaseWeb::Get_User_Info(uint32 iUserID, XT_SERVER_USERINFO_GET_ACK &lpAck)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nUserID;
		double  money;
		int sex,rule,linkprop,familyflag,mobilestatus,integral,career;
		int receptionlimit;
		VARCHAR  var_email[61],var_username[40];
		VARCHAR  var_addr[81],var_mobile[51],var_desc[501];
		VARCHAR  var_faceurl[201],var_usersign[101];
		VARCHAR  var_birthday[9],var_nickname[41],var_avatoruri[501];
		VARCHAR db_link_name[32];
		VARCHAR var_realname[80];
		VARCHAR var_guid[100];
		VARCHAR var_workgroup[100];
		int province,country,city;
		int	retcode;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(var_email);
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_addr);
	SET_INIT_NULL(var_mobile);
	SET_INIT_NULL(var_desc);
	SET_INIT_NULL(var_faceurl);
	SET_INIT_NULL(var_birthday);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_usersign);
	SET_INIT_NULL(var_avatoruri);
	SET_INIT_NULL(var_realname);
	SET_INIT_NULL(var_guid);	
	SET_INIT_NULL(var_workgroup);
	
	money = 0;
	country = 0;
	province = 0;
	city = 0;
	linkprop = 3;
	familyflag = 0;
	rule = 0;
	mobilestatus = 0;
	integral = 0;
	career = 0;
	receptionlimit = 0;
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	nUserID = iUserID;	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:
	if(iUserID > cs_Boundary && iUserID < work_Boundary)
	{
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetUserInfo_20160224(:nUserID,:var_username,:var_nickname,:sex,:var_usersign,:var_faceurl,:var_email,:rule,:var_mobile,:var_desc,:country,:province,:city,:var_birthday,:familyflag,:var_addr,:linkprop,:money,:var_avatoruri,:mobilestatus,:integral,:career,:var_realname,:receptionlimit,:retcode);
			end;
		END-EXEC;
	}
	else
	{
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetUserInfo_20160302(:nUserID,:var_username,:var_nickname,:sex,:var_usersign,:var_faceurl,:var_email,:rule,:var_mobile,:var_desc,:country,:province,:city,:var_birthday,:familyflag,:var_addr,:linkprop,:money,:var_avatoruri,:mobilestatus,:integral,:career,:var_workgroup,:retcode);
			end;
		END-EXEC;

		EXEC SQL AT :db_link_name SELECT SIZEDS INTO :var_guid FROM IM_USER WHERE USERID=:nUserID;
	}
		
	SET_END_NULL(var_username);
	SET_END_NULL(var_nickname);
	SET_END_NULL(var_usersign);
	SET_END_NULL(var_faceurl);
	SET_END_NULL(var_email);
	SET_END_NULL(var_desc);
	SET_END_NULL(var_birthday);
	SET_END_NULL(var_addr);
	SET_END_NULL(var_avatoruri);
	SET_END_NULL(var_realname);
	SET_END_NULL(var_guid);
	SET_END_NULL(var_workgroup);	
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}	
	
	CLog::Log("CDatabaseWeb::Get_User_Info", CLog::TYPE_IMPORTANT, "id:%d, db_ret:%d, retcode:%d",nUserID, db_ret, retcode);

	if (db_ret == 1403 || retcode == 1403)
	{	
		return DB_NOUSER;
	}

	if( db_ret < 0 && db_ret != -1405) 
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}

	lpAck.id		= nUserID;	// 0 用户id
	strncpy(lpAck.email, (char*)var_email.arr,MAX_EMAIL_LEN);	// 1 电子邮件
	strncpy(lpAck.username, (char*)var_username.arr,MAX_USERNAME_LEN) ;	// 3 用户名
	strncpy(lpAck.nickname, (char*)var_nickname.arr,MAX_NICKNAME_LEN+1) ;
	strncpy(lpAck.face_url, (char*)var_faceurl.arr,MAX_HEADURL_LEN) ;
	lpAck.sex	= sex          ;
	lpAck.gold_money	= uint32(money * 100);
	lpAck.province = province	 ;//5 省
	lpAck.country = country		 ;//6 国家
	lpAck.city	= city	     ;//7 城市
	lpAck.career	= 0       ;//9 职业
	strncpy(lpAck.birthday, (char*)var_birthday.arr,MAX_BIRTHDAY_LEN) ;
	lpAck.rule	= rule         ;//10 加为好友的认证方式
	lpAck.familyflag = familyflag;
	lpAck.linkpop = linkprop;
	strncpy(lpAck.address, (char*)var_addr.arr,MAX_ADDRESS_LEN) ;//11 联系地址
	strncpy(lpAck.mobile, (char*)var_mobile.arr,MAX_PHONE_LEN)   ;//12 手机
	strncpy(lpAck.description, (char*)var_desc.arr,MAX_DESCRIPTION_LEN); //13 个人说明
	strncpy(lpAck.usersign, (char*)var_usersign.arr,MAX_USERSIGN_LEN);//个人签名
	strncpy(lpAck.avatoruri, (char*)var_avatoruri.arr,MAX_AVATOR_LEN); //闪秀;
	lpAck.mobilestatus = mobilestatus;
	lpAck.integral = (uint32)integral;
	lpAck.career = career;
	if(iUserID > cs_Boundary && iUserID <work_Boundary && var_realname.arr[0] != 0)
	{
		strncpy(lpAck.nickname, (char*)var_realname.arr,MAX_NICKNAME_LEN) ;	// 3 用户名
		lpAck.csreceptionlimit = receptionlimit;
	}
	if(var_workgroup.arr[0] != 0)
	{
		strncpy(lpAck.workGroup, (char*)var_workgroup.arr,MAX_WORKGROUP_LEN) ;
	}
	if(var_guid.arr[0] != 0)
	{
		strncpy(lpAck.guid, (char*)var_guid.arr,MAX_GUID_LEN) ;	// GUID
/*
		unsigned char aes_keybuf[32];
    	
    	AES_encrypt((unsigned char*)lpAck.guid,bufEncrypt,&aeskey);
  	
		CLog::Log("CDatabaseWeb::Get_User_Info", CLog::TYPE_DEBUG, "AES_enc bgn");
		for(int i = 0; i < strlen(lpAck.guid); ++i)
		{
			CLog::Log("CDatabaseWeb::Get_User_Info", CLog::TYPE_DEBUG, "AES_enc bgn:%d[%x]", i,bufEncrypt[i]);
		}
		CLog::Log("CDatabaseWeb::Get_User_Info", CLog::TYPE_DEBUG, "AES_enc end");
		string strBase64 = Base64Encode((char*)bufEncrypt, strlen(lpAck.guid));

    	memset(lpAck.guid,0,sizeof(lpAck.guid));
    	strncpy(lpAck.guid, strBase64.c_str(), MAX_GUID_LEN);
*/    	
	}
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_Agent_Merchant(uint32 iUserID, uint32 &MerchantId)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nUserID;
		unsigned int nMerchantId;
		VARCHAR db_link_name[32];
		int	retcode;		
		
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	nUserID = iUserID;	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:	  
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.Get_Agent_Merchant(:nUserID,:nMerchantId,:retcode);
		end;
	END-EXEC;	
	
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start; 			
	}	
	
	CLog::Log("CDatabaseWeb::Get_Agent_Merchant", CLog::TYPE_IMPORTANT, "id:%d, db_ret:%d, retcode:%d",nUserID, db_ret, retcode);

	if (db_ret == 1403 || retcode == 1403)
	{	
		
		return DB_NOUSER;
	}

	if( db_ret < 0 && db_ret != -1405) 
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}

	MerchantId = nMerchantId;	
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_User_FriendList(uint32 iUserID, uint16 startPos, XT_FRIENDLIST_ACK::tagFriendInfo * friendInfo, int &nRetCount, uint8 flag)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nUserID, friendID, nFlag;
		int gid, nStartPos, nReqCount;
		VARCHAR db_link_name[32];
		SQL_CURSOR cur_friendlist;
		int	retcode;
	EXEC SQL END DECLARE SECTION;

	if (nRetCount <= 0)
		return DB_PARAM;
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	nStartPos		= startPos;
	nReqCount		=  nRetCount;
	
	nUserID = iUserID;
	nFlag = flag;
	
	friendID = 0;
	gid = 0;
	int db_ret;
	EXEC SQL ALLOCATE :cur_friendlist;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetFriendsList(:nUserID,:nStartPos,:nReqCount,:cur_friendlist,:retcode,:nFlag);
		end;
	END-EXEC;		

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_friendlist;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	CLog::Log("Get_User_FriendList",CLog::TYPE_IMPORTANT,"db_ret:%d, retcode:%d", db_ret, retcode);

	if(db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);
		EXEC SQL CLOSE :cur_friendlist;
		EXEC SQL FREE :cur_friendlist;
		return DB_ERROR;
	}

	int iNum = 0;
	for(;;)
	{  
		EXEC SQL FETCH :cur_friendlist INTO :friendID,:gid;
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 )
		{
			nRetCount = iNum;
			break;
		}
		if (iNum >= nRetCount)
		{
			break;
		}	
		if( db_ret < 0 && db_ret != -1405 )
		{
			sql_error(sqlca, oraca);
			nRetCount = iNum;
			break;
		}		
		
		friendInfo[iNum].friendId	= friendID;
		friendInfo[iNum].groupId	= gid;
		++iNum;
	}
	EXEC SQL CLOSE :cur_friendlist;
	EXEC SQL FREE  :cur_friendlist;
	return DB_SUCCESS;
}

int CDatabaseWeb::GetSubAccount(uint32 groupid, std::vector<uint32_t>& ids)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nGroupID,SubID;
		VARCHAR db_link_name[32];
		SQL_CURSOR cur_sublist;
		int	retcode;
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	nGroupID = groupid;
	
	int db_ret;
	EXEC SQL ALLOCATE :cur_sublist;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetSubAccount(:nGroupID,:cur_sublist,:retcode);
		end;
	END-EXEC;		

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_sublist;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}	

	if(db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);
		EXEC SQL CLOSE :cur_sublist;
		EXEC SQL FREE :cur_sublist;
		return DB_ERROR;
	}

	for(;;)
	{  
		EXEC SQL FETCH :cur_sublist INTO :SubID;
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 )
		{
			break;
		}

		if( db_ret < 0 && db_ret != -1405 )
		{
			sql_error(sqlca, oraca);
			break;
		}		
		
		ids.push_back(SubID);
	}
	
	EXEC SQL CLOSE :cur_sublist;
	EXEC SQL FREE  :cur_sublist;
	return DB_SUCCESS;
}

int CDatabaseWeb::GetFlowMode(uint32 id, int& mode)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nID,nMode;
		VARCHAR db_link_name[32];
		int	retcode;
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	nID = id;
	
	int db_ret;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetFlowMode(:nID,:nMode,:retcode);
		end;
	END-EXEC;		

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}	

	if(db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}

	if(retcode == 1403)
		return DB_ERROR;
		
	mode = nMode;
	
	return DB_SUCCESS;
}

int CDatabaseWeb::SearchConnAccount(uint32 sid, std::vector<uint32_t>& ids, uint32& did)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int n_sid,n_did,n_time,num;
		VARCHAR db_link_name[32],var_id[4000];
		int	retcode;
		SQL_CURSOR cur_accounts;
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	n_sid = sid;
	num = ids.size();
	unsigned int iTime = 0;
	SET_INIT_NULL(var_id);

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int db_ret;
	int iReconnTimes;
	bool bReconn;

	if(num < 100)
	{
		for(unsigned int i = 0;i < num;i++)
		{
			char szUserID[20] = {0};
			itoa(ids[i], szUserID, 20);
			
			strcat((char*)var_id.arr,szUserID);
			
			if (i != num - 1)
				strcat((char*)var_id.arr,",");
		}
		var_id.len = (uint16)strlen((char*)var_id.arr);
	}
	CLog::Log("SearchConnAccount",CLog::TYPE_DEBUG,"var_id.arr is %s\n",(char*)var_id.arr);

	start:
		EXEC SQL ALLOCATE :cur_accounts;
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.SearchConnAccount(:n_sid,:var_id,:cur_accounts,:retcode);
			end;
		END-EXEC;

		db_ret = sqlca.sqlcode;
		if (conn_error(db_ret))
		{
			EXEC SQL CLOSE :cur_accounts;
			iReconnTimes=0;
			bReconn=ConnectDB();
			while(!bReconn)
			{
				iReconnTimes++;
				sleep(iReconnTimes%10);
				bReconn=ConnectDB();
			}
			goto start;				
		}
		
		if(db_ret < 0 && db_ret != -1405) 
		{
			sql_error(sqlca, oraca);		
			EXEC SQL CLOSE :cur_accounts;
			EXEC SQL FREE  :cur_accounts;
			return DB_ERROR;
		}
	
		for(;;)
		{
			EXEC SQL FETCH :cur_accounts INTO :n_did,n_time;

			db_ret = sqlca.sqlcode;
			if (db_ret == 1403 )
			{
				break;
			}
			if( db_ret < 0 && db_ret != -1405 )
			{
				sql_error(sqlca, oraca);
				break;
			}	

			CLog::Log("SearchConnAccount",CLog::TYPE_DEBUG,"n_did is %d,n_time is %d\n",n_did,n_time);
			
			if(n_time > iTime)
			{
				iTime = n_time;
				did = n_did;
			}	
		}

		CLog::Log("SearchConnAccount",CLog::TYPE_DEBUG,"the best id is %d\n",did);
		
		EXEC SQL CLOSE :cur_accounts;
		EXEC SQL FREE  :cur_accounts;
		return DB_SUCCESS;	
}

int CDatabaseWeb::GetNoReplyNum(uint32 id,uint32 time,uint32& NoReplyNum)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int n_id,n_time,num;
		VARCHAR db_link_name[32];
		int	retcode;
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	n_id = id;
	n_time = time;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int db_ret;
	int iReconnTimes;
	bool bReconn;

	start:
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetNoReplyNum(:n_id,:n_time,:num,:retcode);
			end;
		END-EXEC;

		db_ret = sqlca.sqlcode;
		if (conn_error(db_ret))
		{
			iReconnTimes=0;
			bReconn=ConnectDB();
			while(!bReconn)
			{
				iReconnTimes++;
				sleep(iReconnTimes%10);
				bReconn=ConnectDB();
			}
			goto start;				
		}
		
		if(db_ret < 0 && db_ret != -1405) 
		{
			sql_error(sqlca, oraca);		
			return DB_ERROR;
		}

		NoReplyNum = num;
		return DB_SUCCESS;	
}

int CDatabaseWeb::Get_User_JoinFlag(uint32 iUserID, uint8 &joinFlag)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int nUserID;
		int rule;
		int	retcode;
		VARCHAR db_link_name[32];
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	nUserID = iUserID;

	int db_ret;
	rule = 0;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetJoinFlag(:nUserID,:rule,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 && db_ret != -1405) 
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}
		 
	if (db_ret == 1403 || retcode == 1403)
		return DB_NOUSER;

	joinFlag = rule;
	return DB_SUCCESS;
}
 
int CDatabaseWeb::Add_Friend(uint32 iUserID, uint32 friendID, uint8 groupID)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int  nUserID;
		unsigned int  nFriendID;
		int  nGroupID;
		VARCHAR  var_nickname[41], var_username[40];
		VARCHAR db_link_name[32];
		int	retcode;
	EXEC SQL END DECLARE SECTION; 
	
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_username);
	nUserID = iUserID;
	nFriendID = friendID;
	nGroupID = groupID;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	int db_ret;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
			 
start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.AddFriend(:nUserID,:nFriendID,:nGroupID,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if(db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		return DB_ERROR;
	}    

	if ( retcode == DB_FRIENDS_FULL )
		return DB_FRIENDS_FULL;

	return DB_SUCCESS;
}
	 
int CDatabaseWeb::Delete_Friend(uint32 iUserID, uint32 friendID)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int  nUserID,nFriendID;
		VARCHAR db_link_name[32];
		int	retcode;
	EXEC SQL END DECLARE SECTION; 
	
	nUserID = iUserID;
	nFriendID = friendID;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
		
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];	
	int iReconnTimes;
	bool bReconn;
			
start:  
	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.DelFriend(:nUserID,:nFriendID,:retcode);
		end;
	END-EXEC;	
		
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if (db_ret < 0 )
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}
	
	return DB_SUCCESS;
}

int CDatabaseWeb::Search_User_WithUserID(uint32 userid, XT_XTREAM_SEARCH_ACK::tagFriendInfo *friendInfo)
{
	DEF_ORASET;
		EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40],var_nickname[41];
		unsigned int nUserID;
		int     sex, rule;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_nickname);
	
	nUserID = userid;
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
		
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];	
	int iReconnTimes;
	bool bReconn;
			
start:
	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SerarchUserID(:nUserID,:var_nickname,:var_username,:sex,:rule,:retcode);
		end;
	END-EXEC;
		 
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
		
	if( (db_ret < 0 && db_ret != -1405))
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}
		
	if (db_ret == 1403 || retcode == 1403)
	{
		return DB_NOUSER;
	}
	
	SET_END_NULL(var_username);
	SET_END_NULL(var_nickname);
	friendInfo->id = userid;
	friendInfo->sexy = sex;
	friendInfo->rule = rule;
	strncpy(friendInfo->UserName, (char*)var_username.arr,MAX_USERNAME_LEN+1);
	strncpy(friendInfo->NickName, (char*)var_nickname.arr,MAX_NICKNAME_LEN+1);
	
	return DB_SUCCESS;		
}

int CDatabaseWeb::Search_User_WithUserName(char* UserName, XT_XTREAM_SEARCH_ACK::tagFriendInfo *friendInfo)
{
	DEF_ORASET;
		EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40],var_nickname[41];
		unsigned int userID;
		int     sex, rule;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_nickname);
	strncpy((char*)var_username.arr, UserName,MAX_USERNAME_LEN);
	var_username.len = (unsigned short)strlen(UserName);
	var_username.arr[var_username.len] = '\0';
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
		
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];	
	int iReconnTimes;
	bool bReconn;
	
start:	

	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SerarchUserName(:var_username,:userID,:var_nickname,:sex,:rule,:retcode);
		end;
	END-EXEC;	
		
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
		
	if( (db_ret < 0 && db_ret != -1405))
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}
		
	if (db_ret == 1403 || retcode == 1403 )
	{
		return DB_NOUSER;
	}

	SET_END_NULL(var_nickname);
	friendInfo->id = userID;
	friendInfo->sexy = sex;
	friendInfo->rule = rule;
	strncpy(friendInfo->UserName, (char*)var_username.arr,MAX_USERNAME_LEN);
	strncpy(friendInfo->NickName, (char*)var_nickname.arr,MAX_NICKNAME_LEN+1);
	
	return DB_SUCCESS;		
}
		
int CDatabaseWeb::Search_User_WithNickName(char* NickName, uint16 startPos, XT_XTREAM_SEARCH_ACK::tagFriendInfo *friendInfo, uint8 &nRetCount)
 {
	DEF_ORASET;
		EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40], var_nickname[41], var_findnick[40];
		unsigned int userID;
		int     sex, rule, nStartPos, nReqPos;
		VARCHAR db_link_name[32];
		int		 retcode;
		SQL_CURSOR cur_searchnickname;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_findnick);
	strncpy((char*)var_nickname.arr, NickName,MAX_NICKNAME_LEN+1);
	var_nickname.len = (unsigned short)strlen(NickName);
	var_nickname.arr[var_nickname.len] = '\0';
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	nStartPos = startPos;
	nReqPos   = nRetCount;
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	EXEC SQL ALLOCATE :cur_searchnickname;
	int iReconnTimes;
	bool bReconn;
			
start:	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SerarchNickName(:var_nickname,:nStartPos,:nReqPos,:cur_searchnickname,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_searchnickname;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if( db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);
		EXEC SQL CLOSE :cur_searchnickname;
		EXEC SQL FREE  :cur_searchnickname;
		return DB_ERROR;
	}
	
	int iNum = 0;
	for(;;)
	{  
		EXEC SQL FETCH :cur_searchnickname INTO :userID,:var_username,:var_findnick,:sex,:rule;
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || ( db_ret < 0 && db_ret != -1405))
		{
			nRetCount = iNum;
			break;
		}
		if (iNum > nRetCount)
		{
			break;
		}	
		
		SET_END_NULL(var_username);
		SET_END_NULL(var_findnick);

		friendInfo[iNum].id = userID;
		friendInfo[iNum].sexy = sex;
		friendInfo[iNum].rule = rule;
		strncpy(friendInfo[iNum].UserName, (char*)var_username.arr,MAX_USERNAME_LEN);
		strncpy(friendInfo[iNum].NickName, (char*)var_findnick.arr,MAX_NICKNAME_LEN+1);
		
		memset(var_username.arr, 0, sizeof(var_username.arr));
		memset(var_findnick.arr, 0, sizeof(var_findnick.arr));
		var_username.len = 0;
		++iNum;
	}

	EXEC SQL CLOSE :cur_searchnickname;	
	EXEC SQL FREE  :cur_searchnickname;
	return DB_SUCCESS;
 }
	
int CDatabaseWeb::Search_User_WithEmail(char* Email,uint16 startPos,XT_XTREAM_SEARCH_ACK::tagFriendInfo * friendInfo, uint8 &nRetCount)
 {
	DEF_ORASET;
		EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR var_username[40], var_nickname[41], var_email[61];
		unsigned int userID;
		int     sex, rule, nStartPos, nReqPos;
		VARCHAR db_link_name[32];
		int		 retcode;
		SQL_CURSOR cur_searchemail;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_email);
	strncpy((char*)var_email.arr, Email,60);
	var_email.len = (unsigned short)strlen(Email);
	var_email.arr[var_email.len] = '\0';
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	sex = 2;
	rule = 0;
	
	nStartPos = startPos;
	nReqPos   = nRetCount;
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

	EXEC SQL ALLOCATE :cur_searchemail;

start:	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SerarchEmail(:var_email,:nStartPos,:nReqPos,:cur_searchemail,:retcode);
		end;
	END-EXEC;	
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_searchemail;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);
		EXEC SQL CLOSE :cur_searchemail;
		EXEC SQL FREE  :cur_searchemail;
		return DB_ERROR;
	}
	
	int iNum = 0;
	for(;;)
	{  
		EXEC SQL FETCH :cur_searchemail INTO :userID,:rule,:var_username,:var_nickname,:sex;
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || (db_ret < 0 && db_ret != -1405))
		{
			nRetCount = iNum;
			break;
		}
		if (iNum > nRetCount)
		{
			break;
		}

		SET_END_NULL(var_username);
		SET_END_NULL(var_nickname);

		friendInfo[iNum].id = userID;
		friendInfo[iNum].sexy = sex;
		friendInfo[iNum].rule = rule;
		strncpy(friendInfo[iNum].UserName, (char*)var_username.arr,MAX_USERNAME_LEN);
		strncpy(friendInfo[iNum].NickName, (char*)var_nickname.arr,MAX_NICKNAME_LEN+1);
		
		memset(var_username.arr, 0, sizeof(var_username.arr));
		var_username.len = 0;
		memset(var_nickname.arr, 0, sizeof(var_nickname.arr));
		var_nickname.len = 0;
		++iNum;
	}

	EXEC SQL CLOSE :cur_searchemail;
	EXEC SQL FREE  :cur_searchemail;
	return DB_SUCCESS;
}

int CDatabaseWeb::Change_User_PWD(uint32 userid)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;       
		unsigned int      cno;		
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
		
	cno = userid;
	int db_ret;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start:	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ChangePwd(:cno,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( (db_ret < 0 && db_ret != -1405) || db_ret == 1403)
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}

	return DB_SUCCESS;	
}

int CDatabaseWeb::Modify_User_Info(XT_USERINFO_MOD_REQ *pUserInfo)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;       
		unsigned int      cno;
		int      rule,sex,linkprop,familyflag;
		int      province,country,city,career;
		VARCHAR  var_email[61],var_pass[90];
		VARCHAR  var_birthday[9],var_nickname[41],var_testnick[41];
		VARCHAR  var_addr[81],var_mobile[21],var_desc[501],var_url[101];	
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;

	SET_INIT_NULL(var_email);
	SET_INIT_NULL(var_pass);
	SET_INIT_NULL(var_birthday);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_testnick);

	SET_INIT_NULL(var_addr);
	SET_INIT_NULL(var_mobile);
	SET_INIT_NULL(var_desc);
	SET_INIT_NULL(var_url);
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	if( !pUserInfo )
		return DB_PARAM;
	cno = pUserInfo->id;
	rule=pUserInfo->rule;
	familyflag = pUserInfo->familyflag; 
	sex=pUserInfo->sex;
	linkprop = pUserInfo->linkpop;

	if(strlen(pUserInfo->email)>=61||
		strlen(pUserInfo->nickname)>=41 ||
		strlen(pUserInfo->mobile)>=21||
		strlen(pUserInfo->description)>=501)
	return DB_PARAM;  

	province=pUserInfo->province;
	country=pUserInfo->country;
	city=pUserInfo->city;
	career=pUserInfo->career;
	strncpy((char*)var_email.arr,pUserInfo->email,MAX_EMAIL_LEN);
	var_email.len = (short)strlen((char *)var_email.arr);

	strncpy((char*)var_pass.arr,pUserInfo->password,MAX_PASSWORD_LEN);
	var_pass.len = (short)strlen((char *)var_pass.arr);  
	strncpy((char*)var_birthday.arr,pUserInfo->birthday,MAX_BIRTHDAY_LEN);/*4*/
	var_birthday.len = (short)strlen((char *)var_birthday.arr);

	strncpy((char*)var_nickname.arr,pUserInfo->nickname,MAX_NICKNAME_LEN+1);/*4*/
	var_nickname.len = (short)strlen((char *)var_nickname.arr);

	strncpy((char*)var_addr.arr,pUserInfo->address,MAX_ADDRESS_LEN);
	var_addr.len = (short)strlen((char *)var_addr.arr);
	strncpy((char*)var_mobile.arr,pUserInfo->mobile,MAX_PHONE_LEN);
	var_mobile.len = (short)strlen((char *)var_mobile.arr);
	strncpy((char*)var_desc.arr,pUserInfo->description,MAX_DESCRIPTION_LEN);
	var_desc.len = (short)strlen((char *)var_desc.arr);
	strncpy((char*)var_url.arr,pUserInfo->face_url,MAX_HEADURL_LEN);
	var_url.len = (short)strlen((char *)var_url.arr);
	
	if (strcmp(pUserInfo->nickname,"") == 0)
	{
	
	}
	else
	{	
		char nickname[41]={0},repname[41]={0};
		strncpy(nickname, pUserInfo->nickname,MAX_NICKNAME_LEN+1);	
		char *p = nickname;
		char *pd = repname;
		while(*p)
		{		
			if( (*p >= 'a' && *p <= 'z') ||
				(*p >= 'A' && *p <= 'Z') || 
				(*p >= '0' && *p <= '9'))
			{	
				*pd++ = *p++;
			}
			else if ((BYTE)*p > 127)
			{
				if( (BYTE)*p == 0xa1 && (BYTE)*(p+1) == 0xa1)
				{
					p += 2;
				}
				else
					*pd++ = *p++;	
			}
			else
				p++;
		}
		*pd = 0;
		
		strncpy((char*)var_testnick.arr, repname,MAX_NICKNAME_LEN+1);
		var_testnick.len = (unsigned short)strlen(repname);	
	}
			
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start:
	//昵称不可以重复。		
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ModifyUserInfo(:cno,:rule,:var_nickname,:var_testnick,:var_pass,:var_desc,:var_email,:var_mobile,:familyflag,:var_birthday,:country,:province,:city,:sex,:var_addr,:linkprop,:career,:var_url,:retcode);
			end;
	END-EXEC;
	
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
		
	if (retcode  == DB_NICKNAME_EXIST)
	{
		return DB_NICKNAME_EXIST;
	}
	if (retcode  == DB_NICKNAME_ERROR)
	{
		return DB_NICKNAME_ERROR;
	}
	
	return DB_SUCCESS;
}
 
int CDatabaseWeb::Modify_Friend_Comment(uint32 UserID, uint32 friendno, char * comment)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int clientno,friendid;
		VARCHAR friendcomment[32];
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	SET_INIT_NULL(friendcomment);
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	clientno = UserID;
	friendid = friendno;
	
	strncpy((char*)friendcomment.arr, comment,MAX_COMMENTNAME_LEN);
	friendcomment.len = (short)strlen((char*)friendcomment.arr);
	if (friendcomment.len > 17)
		return DB_PARAM;
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start: 	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ModifyFriendAliasname20150824(:clientno,:friendid,:friendcomment,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 )
	{		
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}

	if (db_ret == 1403)
	{
		return DB_NOUSER;
	}
	
	return DB_SUCCESS;	
}
		
int	CDatabaseWeb::Update_User_Money(uint32 clientno, int sendmoney)
{
	return DB_SUCCESS;	
}
 
int CDatabaseWeb::Modify_User_UnderWrite(uint32 UserID, char* userUnderWrite)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int		userid;
		VARCHAR				var_underwrite[101];
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	SET_INIT_NULL(var_underwrite);
	userid = UserID;
	
	strncpy((char*)var_underwrite.arr, userUnderWrite,MAX_USERSIGN_LEN);
	var_underwrite.len = (short)strlen((char*)var_underwrite.arr);
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start:
		
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ModifyUserSign(:userid,:var_underwrite,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 )
	{		
		sql_error(sqlca, oraca);
		return DB_ERROR;
	}
	
	return DB_SUCCESS;	
} 

int CDatabaseWeb::Modify_Friend_Flag(uint32 UserID, uint32 friendno, uint8 flag)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int		userid, friendid, iloveflag;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	userid = UserID;
	friendid = friendno;
	iloveflag = flag;
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ModifyFriendLoveFlag(:userid,:friendid,:iloveflag,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if( db_ret < 0 )
	{		
		sql_error(sqlca, oraca);;
		return DB_ERROR;
	}
	if (db_ret == 1403)
	{
		return DB_NOFRIEND;
	}
	
	return DB_SUCCESS;
}


//nRetCount  请求条数，返回条数
int CDatabaseWeb::Get_Web_Msg(uint32 &recid, ST_WEB_MSG *pWebMsg, uint16 &nRetCount)//每隔一定时间查一次表
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     recvid,sendid,rectID, nReqCount;
		short   imsgtype;
		VARCHAR var_time[20], var_msg[1401];//MAX_MSG_LEN
		VARCHAR db_link_name[32];
		int		 retcode;
		SQL_CURSOR cur_webmsg;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	rectID = recid;
	nReqCount = nRetCount;
	
	SET_INIT_NULL(var_msg);
	SET_INIT_NULL(var_time);
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
	
	EXEC SQL ALLOCATE :cur_webmsg;

start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetClientMsg(:rectID,:nReqCount,:cur_webmsg,:retcode);
		end;
	END-EXEC;	    
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_webmsg;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		EXEC SQL CLOSE :cur_webmsg;
		EXEC SQL FREE  :cur_webmsg;
		return DB_ERROR;
	}
	
	int iNum = 0;
	
	for(;;)
	{  
		EXEC SQL FETCH :cur_webmsg INTO :rectID,:recvid, :sendid,:imsgtype,:var_msg,:var_time;
	
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || iNum >= nRetCount)
		{
			recid = rectID;
			nRetCount = iNum;
			break;
		}
		if( db_ret < 0 && db_ret != -1405 )
		{					
			recid = rectID;
			nRetCount = iNum;
			break;
		}
		SET_END_NULL(var_msg);
		SET_END_NULL(var_time);
		
		pWebMsg[iNum].recID			= rectID;
		pWebMsg[iNum].recvID		= recvid;
		pWebMsg[iNum].sendID		= sendid;
		pWebMsg[iNum].msgtype	= (unsigned short)imsgtype;  
		memcpy((char*)pWebMsg[iNum].msg, var_msg.arr,var_msg.len + 1);
		memcpy(pWebMsg[iNum].sendTime, (char*)var_time.arr, var_time.len + 1);

		SET_INIT_NULL(var_msg);
		SET_INIT_NULL(var_time);

		++iNum;		
	}

	EXEC SQL CLOSE :cur_webmsg;
	EXEC SQL FREE  :cur_webmsg;
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_Offline_WebMsg(uint32 userid, ST_WEB_MSG *pWebMsg, uint16 &nRetCount)//用户登录时获取网站消息
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int rectID,sendID,recvID;
		int			 reqCount;
		short   imsgtype;
		VARCHAR var_time[20], var_msg[1401];//MAX_MSG_LEN
		VARCHAR db_link_name[32];
		int		 retcode;
		SQL_CURSOR cur_offwebmsg;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	recvID = userid;
	reqCount = nRetCount;
	
	SET_INIT_NULL(var_msg);
	SET_INIT_NULL(var_time);
	
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;	
	
	EXEC SQL ALLOCATE :cur_offwebmsg;

start:	//bloggerid 发送方博客Id ;  userid 接收方用户ID
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetOfflineClientMsg(:recvID,:reqCount,:cur_offwebmsg,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_offwebmsg;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if( db_ret < 0 )
	{
		sql_error(sqlca, oraca);	
		EXEC SQL CLOSE :cur_offwebmsg;
		EXEC SQL FREE  :cur_offwebmsg;	
		return DB_ERROR;
	}
	
	int iNum = 0;
	
	for(;;)
	{  
		EXEC SQL FETCH :cur_offwebmsg INTO :rectID, :sendID,:imsgtype,:var_msg,:var_time;
	
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || iNum >= nRetCount)
		{			
			nRetCount = iNum;			
			break;
		}
		if( db_ret < 0 && db_ret != -1405 )
		{
			sql_error(sqlca, oraca);					
			nRetCount = iNum;
			break;
		}

		SET_END_NULL(var_msg);
		SET_END_NULL(var_time);
		pWebMsg[iNum].recID			= rectID;
		pWebMsg[iNum].recvID		= userid;
		pWebMsg[iNum].sendID		= sendID;
		pWebMsg[iNum].msgtype	= (unsigned short)imsgtype;  
		memcpy((char*)pWebMsg[iNum].msg, (char*)var_msg.arr, var_msg.len + 1);
		memcpy(pWebMsg[iNum].sendTime, (char*)var_time.arr, var_time.len + 1);	 	
		SET_INIT_NULL(var_msg);
		SET_INIT_NULL(var_time);

		++iNum;	
	}

	EXEC SQL CLOSE :cur_offwebmsg;
	EXEC SQL FREE  :cur_offwebmsg;
	return DB_SUCCESS;
}
int CDatabaseWeb::SendFriendInvite(uint32 userID, char *emailAddress, char *emailTitle, char *emailContent)
{
	return DB_SUCCESS;

}

int CDatabaseWeb::Set_WebMsg_Status(uint32 recID)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     recid;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	recid = recID;
	int db_ret;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;

start: 		
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.SetClientMsgStatus(:recid,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if (db_ret < 0 || db_ret == 1403)
	{
		sql_error(sqlca, oraca);
		return DB_ERROR;	
	}

	return DB_SUCCESS;
}
 
int CDatabaseWeb::Get_User_FriendGroup(uint32 UserID, uint32 friendno, uint8 &groupID)     
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int  nUserID;
		unsigned int  nFriendID;
		int  nGroupID;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION; 
	
	nUserID = UserID;
	nFriendID = friendno;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	int db_ret;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
		 
start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetFriendGroup(:nUserID,:nFriendID,:nGroupID,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if (db_ret < 0 )
	{
		sql_error(sqlca, oraca);
		groupID = GROUPID_BLACKLIST;		
		return DB_ERROR;
	}

	if (db_ret == 1403)
	{
		groupID = GROUPID_BLACKLIST;		
		return DB_SUCCESS;
	}
	groupID = nGroupID;		
		
	return DB_SUCCESS;
}

int CDatabaseWeb::Modify_Friend_Group(uint32 userID, uint32 friendID, uint8 groupID)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int  nUserID;
		unsigned int  nFriendID;
		int  nGroupID;
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION; 
	
	nUserID = userID;
	nFriendID = friendID;
	nGroupID = groupID;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	
	int db_ret;

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	int iReconnTimes;
	bool bReconn;
		 
start:
	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.ModifyFriendGroup(:nUserID,:nFriendID,:nGroupID,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		return DB_ERROR;
	}
		
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_UserFriend_Comment(uint32 UserID, uint32 friendID, char* comment)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     userid, friendid;
		VARCHAR  var_aliasname[40];
		VARCHAR	 db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;

	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);
	
		SET_INIT_NULL(var_aliasname);
		userid			= UserID;
		friendid		= friendID;
		memset(comment, 0, MAX_COMMENTNAME_LEN);

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];    
	int db_ret;	  
	int iReconnTimes;
	bool bReconn;
	
start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetFriendAliasName(:userid,:friendid,:var_aliasname,:retcode);
		end;
	END-EXEC;	

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;	
	}

	if ( db_ret == 1403 || retcode == 1403)
		return DB_NOUSER;

	if( db_ret < 0 && db_ret != -1405)	//1405 允许部分字段为空
	{
		char szError[255];
		memset(szError, 0, sizeof(szError));
		sprintf(szError, "Get_UserFriend_Comment() ID:%d, ErrorCode:%d",UserID, db_ret); 
		sql_error(sqlca, oraca);
		return CError::DB_Error(DB_ERROR, szError);
	}

	if (db_ret == -1405)
		comment[0] = '\0';
	else
	{
		SET_END_NULL(var_aliasname);
		strncpy(comment, (char*)var_aliasname.arr,MAX_COMMENTNAME_LEN);
	}

	return DB_SUCCESS;
}

int  CDatabaseWeb::Get_Basic_UserInfo2(const uint32 requestID, uint32 *iUserID, XT_GET_FRIEND_BASICINFO_NOTIFY::tagFriendInfo *pBasicUserInfo, uint16 &nRetCount)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR	 db_link_name[32],var_userid[4000];
		unsigned int nUserid,nReqUserID;
		VARCHAR var_username[121],var_nickname[121],var_faceurl[201],var_usersign[101],var_commentname[32],var_guid[40],var_realname[80];
		int sex,nLoveFlag,mobilestatus;
		int		 retcode;
		SQL_CURSOR cur_userbasicinfo;
		SQL_CURSOR cur_friendsbasicinfo;
	EXEC SQL END DECLARE SECTION;

	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);
	
	nReqUserID = requestID;

	int iNum = 0;
	mobilestatus = 0;
	SET_INIT_NULL(var_username);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_faceurl);
	SET_INIT_NULL(var_usersign);
	SET_INIT_NULL(var_commentname);
	SET_INIT_NULL(var_userid);
	SET_INIT_NULL(var_guid);
	SET_INIT_NULL(var_realname);


	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];    
	int db_ret;	
	int iReconnTimes;
	bool bReconn;	
	
	for(int i = 0; i < nRetCount; ++i)
	{	
		char szUserID[10] = {0};
		itoa(iUserID[i], szUserID, 10);
		strcat((char*)var_userid.arr,szUserID);
		if (i != nRetCount -1)
		strcat((char*)var_userid.arr,",");
	}
	var_userid.len = (uint16)strlen((char*)var_userid.arr);
	CLog::Log("Get_Basic_UserInfo2",CLog::TYPE_DEBUG,"var_userid.arr:%s",(char*)var_userid.arr);

start:  
	if (requestID == 0)
	{
		EXEC SQL ALLOCATE :cur_userbasicinfo;
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetUserBaseInfo(:var_userid,:cur_userbasicinfo,:retcode);
			end;
		END-EXEC;

		db_ret = sqlca.sqlcode;
		if (conn_error(db_ret))
		{
			EXEC SQL CLOSE :cur_userbasicinfo;
			iReconnTimes=0;
			bReconn=ConnectDB();
			while(!bReconn)
			{
				iReconnTimes++;
				sleep(iReconnTimes%10);
				bReconn=ConnectDB();
			}
			goto start;				
		}
		
		if(db_ret < 0 && db_ret != -1405) 
		{
			sql_error(sqlca, oraca);		
			EXEC SQL CLOSE :cur_userbasicinfo;
			EXEC SQL FREE  :cur_userbasicinfo;
			return DB_ERROR;
		}

		iNum = 0;
		for(;;) //USERID,USERNAME, NICKNAME,USERSEX,USERPICURI
		{  
			pBasicUserInfo[iNum].LoveFlag = 0;
			memset(pBasicUserInfo[iNum].szUserSign, 0, sizeof(pBasicUserInfo[iNum].szUserSign));
			memset(pBasicUserInfo[iNum].szCommentName, 0, sizeof(pBasicUserInfo[iNum].szCommentName));
			memset(pBasicUserInfo[iNum].szGuid, 0, sizeof(pBasicUserInfo[iNum].szGuid));
			EXEC SQL FETCH :cur_userbasicinfo INTO :nUserid,:var_username,:var_nickname,:sex,:var_faceurl,:mobilestatus,var_guid,:var_realname;
			db_ret = sqlca.sqlcode;
			if (db_ret == 1403 )
			{
				nRetCount = iNum;
				break;
			}
			if (iNum >= nRetCount)
			{
				break;
			}	
			if( db_ret < 0 && db_ret != -1405 )
			{
				sql_error(sqlca, oraca);
				nRetCount = iNum;
				break;
			}		
			SET_END_NULL(var_username);
			SET_END_NULL(var_nickname);
			SET_END_NULL(var_faceurl);
			SET_END_NULL(var_guid);
			SET_END_NULL(var_realname);
			
			pBasicUserInfo[iNum].nID = nUserid;
			strncpy(pBasicUserInfo[iNum].szUserName,(char*)var_username.arr,MAX_USERNAME_LEN);					
			strncpy(pBasicUserInfo[iNum].szNickName,(char*)var_nickname.arr,MAX_NICKNAME_LEN+1);				
			pBasicUserInfo[iNum].nSexy = sex;			
			strncpy(pBasicUserInfo[iNum].szHeadUrl,(char*)var_faceurl.arr,MAX_HEADURL_LEN);	
			pBasicUserInfo[iNum].mobileStatus = mobilestatus;				
			strncpy(pBasicUserInfo[iNum].szGuid,(char*)var_guid.arr,MAX_GUID_LEN);
			if(pBasicUserInfo[iNum].nID > cs_Boundary && var_realname.arr[0] != 0)
			{
				strncpy(pBasicUserInfo[iNum].szNickName,(char*)var_realname.arr,MAX_NICKNAME_LEN);	
			}
			CLog::Log("Get_Basic_UserInfo2",CLog::TYPE_IMPORTANT,"1Userid:%d,var_username:%s,var_realname:%s",nUserid,(char*)var_username.arr,(char*)var_realname.arr);
			++iNum;
		}
		EXEC SQL CLOSE :cur_userbasicinfo;
		EXEC SQL FREE  :cur_userbasicinfo;
		return DB_SUCCESS;		
	}
	else
	{  
		EXEC SQL ALLOCATE :cur_friendsbasicinfo;
		EXEC SQL AT :db_link_name EXECUTE
			begin
				Mini_User_Pkg.GetFriendsBaseInfo_20150729(:nReqUserID,:var_userid,:cur_friendsbasicinfo,:retcode);
			end;
		END-EXEC;

		db_ret = sqlca.sqlcode;
		if (conn_error(db_ret))
		{
			EXEC SQL CLOSE :cur_friendsbasicinfo;
			iReconnTimes=0;
			bReconn=ConnectDB();
			while(!bReconn)
			{
				iReconnTimes++;
				sleep(iReconnTimes%10);
				bReconn=ConnectDB();
			}
			goto start;				
		}
		
		if(db_ret < 0 && db_ret != -1405)
		{
			sql_error(sqlca, oraca);		
			EXEC SQL CLOSE :cur_friendsbasicinfo;
			EXEC SQL FREE  :cur_friendsbasicinfo;
			return DB_ERROR;
		}

		iNum = 0;
		for(;;) //USERID,USERNAME, NICKNAME,USERSEX,USERPICURI
		{  
			EXEC SQL FETCH :cur_friendsbasicinfo INTO :nUserid,:var_username,:var_nickname,:sex,:var_faceurl,:var_usersign,:var_commentname,:nLoveFlag,:mobilestatus,:var_guid,:var_realname;
			db_ret = sqlca.sqlcode;
			if (db_ret == 1403 )
			{
				nRetCount = iNum;
				break;
			}
			if (iNum >= nRetCount)
			{
				break;
			}	
			if( db_ret < 0 && db_ret != -1405 )
			{
				sql_error(sqlca, oraca);
				nRetCount = iNum;
				break;
			}	
			SET_END_NULL(var_username);
			SET_END_NULL(var_nickname);
			SET_END_NULL(var_faceurl);	
			SET_END_NULL(var_usersign);
			SET_END_NULL(var_commentname);
			SET_END_NULL(var_guid);
			SET_END_NULL(var_realname);
	
			pBasicUserInfo[iNum].nID = nUserid;
			strncpy(pBasicUserInfo[iNum].szUserName,(char*)var_username.arr,MAX_USERNAME_LEN);					
			strncpy(pBasicUserInfo[iNum].szNickName,(char*)var_nickname.arr,MAX_NICKNAME_LEN+1);				
			pBasicUserInfo[iNum].nSexy = sex;			
			strncpy(pBasicUserInfo[iNum].szHeadUrl,(char*)var_faceurl.arr,MAX_HEADURL_LEN);						
			strncpy(pBasicUserInfo[iNum].szUserSign,(char*)var_usersign.arr,MAX_USERSIGN_LEN);					
			strncpy(pBasicUserInfo[iNum].szCommentName,(char*)var_commentname.arr,MAX_COMMENTNAME_LEN);					
			pBasicUserInfo[iNum].LoveFlag = nLoveFlag;	
			pBasicUserInfo[iNum].mobileStatus = mobilestatus;
			strncpy(pBasicUserInfo[iNum].szGuid,(char*)var_guid.arr,MAX_GUID_LEN);	
			if(pBasicUserInfo[iNum].nID > cs_Boundary && var_realname.arr[0] != 0)
			{
				strncpy(pBasicUserInfo[iNum].szNickName,(char*)var_realname.arr,MAX_NICKNAME_LEN);	
			}

			CLog::Log("Get_Basic_UserInfo2",CLog::TYPE_IMPORTANT,"2Userid:%d,var_username:%s,var_realname:%s",
				nUserid,(char*)var_username.arr,(char*)var_realname.arr);
			++iNum;
		}
		EXEC SQL CLOSE :cur_friendsbasicinfo;
		EXEC SQL FREE  :cur_friendsbasicinfo;
		return DB_SUCCESS;	
	}	
	return DB_SUCCESS;	
}

int CDatabaseWeb::Add_Register_Info(LPXT_REGIST_REQ pRegInfo, uint32 &RetUserID, uint8 &ReturnCode)
{
	RetUserID = 0;
	ReturnCode=0;
	return DB_SUCCESS;
}


int  CDatabaseWeb::Get_User_FamilyFlag(uint32 *iUserID, XT_USERFAMILYFLAG_GET_ACK::tagUserFamilyFlag *pUserFamilyFlag, uint8 &nRetCount)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR	 db_link_name[32];
		VARCHAR var_userid[4000];
		int		 retcode, nLoveFlag;
		unsigned int nUserID;
		SQL_CURSOR cur_userfamilyflag;
	EXEC SQL END DECLARE SECTION;

	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen(m_Connect);
	
/*
	if (nRetCount > 500)
	{
		nRetCount = 0;
		return DB_SUCCESS;
	}
*/

	SET_INIT_NULL(var_userid);
	
	for(int i = 0; i < nRetCount; ++i)
	{	
		char szUserID[10] = {0};
		itoa(iUserID[i], szUserID, 10);
		strcat((char*)var_userid.arr,szUserID);
		if (i != nRetCount -1)
			strcat((char*)var_userid.arr,",");
	}
	var_userid.len = (uint16)strlen((char*)var_userid.arr);
	

	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];    
	EXEC SQL ALLOCATE :cur_userfamilyflag;
	int db_ret;	
	int iReconnTimes;
	bool bReconn;

start:  
	
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserJoin2Family(:var_userid,:cur_userfamilyflag,:retcode);
		end;
	END-EXEC;

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_userfamilyflag;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if(db_ret < 0 && db_ret != -1405)
	{
		sql_error(sqlca, oraca);		
		EXEC SQL CLOSE :cur_userfamilyflag;
		EXEC SQL FREE  :cur_userfamilyflag;
		return DB_ERROR;
	}

	int iNum = 0;
	for(;;) //USERID,USERNAME, NICKNAME,USERSEX,USERPICURI
	{  
		EXEC SQL FETCH :cur_userfamilyflag INTO :nUserID,:nLoveFlag;
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 )
		{
			nRetCount = iNum;
			break;
		}
		if (iNum >= nRetCount)
		{
			break;
		}	
		if( db_ret < 0 && db_ret != -1405 )
		{
			sql_error(sqlca, oraca);
			nRetCount = iNum;
			break;
		}		

		pUserFamilyFlag[iNum].uID = nUserID;
		pUserFamilyFlag[iNum].flag = nLoveFlag;	

		++iNum;
	}
	EXEC SQL CLOSE :cur_userfamilyflag;
	EXEC SQL FREE  :cur_userfamilyflag;
	return DB_SUCCESS;	

}

//nRetCount  请求条数，返回条数
int CDatabaseWeb::Get_Operation_Msg(uint32 &recid, ST_WOKU_MSG *pOperationMsg, uint16 &nRetCount)//每隔一定时间查一次表
{
	nRetCount=0;
	return DB_SUCCESS;
}
int CDatabaseWeb::Get_OneOperation_Msg(uint32 &recid, char* strFriend,ST_WOKU_MSG *pOperationMsg, uint16 &nRetCount)
{
	nRetCount=0;
	return DB_SUCCESS;
}

//nRetCount  请求条数，返回条数
int CDatabaseWeb::Get_User_Msg(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//收件箱
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     recvID,sendID,rectID,msgID,nReqCount;
		VARCHAR var_time[32], var_title[201],var_content[901];//MAX_MSG_LEN
		VARCHAR db_link_name[32], var_nickname[41], var_username[40];
		int		 retcode,msgtype;
		SQL_CURSOR cur_usermsg;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	rectID = recid;
	nReqCount = nRetCount;
	
	SET_INIT_NULL(var_time);
	SET_INIT_NULL(var_title);
	SET_INIT_NULL(var_content);
	SET_INIT_NULL(var_nickname);
	SET_INIT_NULL(var_username);

	
	int db_ret;
	int iReconnTimes;
	bool bReconn;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];
	EXEC SQL ALLOCATE :cur_usermsg;

 start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserMsg(:rectID,:nReqCount,:cur_usermsg,:retcode);
		end;
	END-EXEC;	    

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		EXEC SQL CLOSE :cur_usermsg;
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}
	
	if( db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		EXEC SQL CLOSE :cur_usermsg;
		EXEC SQL FREE  :cur_usermsg;
		return DB_ERROR;
	}
	
	int iNum = 0;
	
	//a.RECID,a.USERID,a.MSGID,b.userid,b.title,b.content,b.msgtype,TO_CHAR(b.createDate,'YYYY/MM/DD HH24:MI:SS'),c.nickname
	for(;;)
	{  
		EXEC SQL FETCH :cur_usermsg INTO :rectID,:recvID,:msgID,:sendID,:var_title,:var_content,:msgtype,:var_time,:var_nickname,:var_username;
	
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || iNum >= nRetCount)
		{
			recid = rectID;
			nRetCount = iNum;
			break;
		}
		if( db_ret < 0 && db_ret != -1405 )
		{	
			sql_error(sqlca, oraca);					
			recid = rectID;
			nRetCount = iNum;
			break;
		}
		SET_END_NULL(var_title);
		SET_END_NULL(var_content);
		SET_END_NULL(var_time);
		SET_END_NULL(var_nickname);
		SET_END_NULL(var_username);
		pUserMsg[iNum].type		= ST_WOKU_MSG::USERRECVMSG;
		pUserMsg[iNum].recID		= rectID;
		pUserMsg[iNum].recvID		= recvID;
		pUserMsg[iNum].sendID		= sendID;
		memcpy((char*)pUserMsg[iNum].nickname, (char*)var_nickname.arr, var_nickname.len + 1);
		memcpy((char*)pUserMsg[iNum].username, (char*)var_username.arr, var_username.len + 1);
		pUserMsg[iNum].classID		= msgtype;
		pUserMsg[iNum].logID		= 0;
		memset(pUserMsg[iNum].srcuri, 0, sizeof(pUserMsg[iNum].srcuri));
		memcpy((char*)pUserMsg[iNum].title, var_title.arr,var_title.len + 1);
		memcpy((char*)pUserMsg[iNum].content, var_content.arr,var_content.len + 1);
		memcpy((char*)pUserMsg[iNum].sendTime, (char*)var_time.arr, var_time.len + 1);
		SET_INIT_NULL(var_time);
		SET_INIT_NULL(var_title);
		SET_INIT_NULL(var_content);
		SET_INIT_NULL(var_nickname);
		SET_INIT_NULL(var_username);

		++iNum;		
	}

	EXEC SQL CLOSE :cur_usermsg;
	EXEC SQL FREE  :cur_usermsg;
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_OneUser_Msg(uint32 &recid, uint32 userID,ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//收件箱
{
	nRetCount=0;
	return DB_SUCCESS;
}
	
	 
int CDatabaseWeb::Get_Sys_Msg(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//系统广播
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     msgID;
		int nReqCount;
		VARCHAR var_time[32], var_title[64],var_content[512],var_toid[512];//MAX_MSG_LEN
		VARCHAR db_link_name[32];
		int		 retcode;
		SQL_CURSOR cur_sysmsg;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	msgID = recid;
	nReqCount = nRetCount;
	
	SET_INIT_NULL(var_time);
	SET_INIT_NULL(var_title);
	SET_INIT_NULL(var_content);
	SET_INIT_NULL(var_toid);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;
	
	EXEC SQL ALLOCATE :cur_sysmsg;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];

 start:    
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetSysMsg(:msgID,:nReqCount,:cur_sysmsg,:retcode);
		end;
	END-EXEC;	
				
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		EXEC SQL CLOSE :cur_sysmsg;
		EXEC SQL FREE  :cur_sysmsg;
		return DB_ERROR;
	}
	
	int iNum = 0;
	
	//MSGID,title,content,TO_CHAR(createDate,'YYYY/MM/DD HH24:MI:SS')
	for(;;)
	{  
		EXEC SQL FETCH :cur_sysmsg INTO :msgID,:var_title,:var_content,:var_time,:var_toid;
	
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || iNum >= nRetCount)
		{
			nRetCount = iNum;
			break;
		}
		if( db_ret < 0 && db_ret != -1405 )
		{					
			sql_error(sqlca, oraca);	
			nRetCount = iNum;
			break;
		}
		
		SET_END_NULL(var_title);
		SET_END_NULL(var_content);
		SET_END_NULL(var_time);
		SET_END_NULL(var_toid);
		
		pUserMsg[iNum].type		= ST_WOKU_MSG::SYSTEMPUB;
		pUserMsg[iNum].recID		= msgID;
		pUserMsg[iNum].recvID		= 0;
		pUserMsg[iNum].sendID		= 0;
		memset(pUserMsg[iNum].nickname, 0,sizeof(pUserMsg[iNum].nickname));
		pUserMsg[iNum].classID		= 0;
		pUserMsg[iNum].logID		= 0;
		memset(pUserMsg[iNum].srcuri, 0, sizeof(pUserMsg[iNum].srcuri));
		memcpy((char*)pUserMsg[iNum].title, var_title.arr,var_title.len + 1);
		memcpy((char*)pUserMsg[iNum].content, var_content.arr,var_content.len + 1);
		memcpy((char*)pUserMsg[iNum].sendTime, (char*)var_time.arr, var_time.len + 1);
		memcpy((char*)pUserMsg[iNum].toids, (char*)var_toid.arr, var_toid.len + 1);

		if(msgID > recid)
			recid = msgID;
		
		++iNum;		
	}

	EXEC SQL CLOSE :cur_sysmsg;
	EXEC SQL FREE  :cur_sysmsg;
	return DB_SUCCESS;
}   

int CDatabaseWeb::Get_SysOff_Msg(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount, char* uid)//离线系统消息
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int msgID;
		int nReqCount;
		VARCHAR var_time[32], var_title[64],var_content[512],var_id[64];
		VARCHAR db_link_name[32];
		int retcode;
		SQL_CURSOR cur_sysmsg;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);
	strncpy((char*)var_id.arr, uid, 64);
	var_id.len = (unsigned short)strlen((char*)var_id.arr);

	msgID = recid;
	nReqCount = nRetCount;
	
	SET_INIT_NULL(var_time);
	SET_INIT_NULL(var_title);
	SET_INIT_NULL(var_content);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;
	
	EXEC SQL ALLOCATE :cur_sysmsg;
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];

 start:    
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetSysOffMsg(:msgID,:var_id,:nReqCount,:cur_sysmsg,:retcode);
		end;
	END-EXEC;	
				
	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if( db_ret < 0 )
	{
		sql_error(sqlca, oraca);		
		EXEC SQL CLOSE :cur_sysmsg;
		EXEC SQL FREE  :cur_sysmsg;
		return DB_ERROR;
	}
	
	int iNum = 0;
	
	for(;;)
	{  
		EXEC SQL FETCH :cur_sysmsg INTO :msgID,:var_title,:var_content,:var_time;
	
		db_ret = sqlca.sqlcode;
		if (db_ret == 1403 || iNum >= nRetCount)
		{
			nRetCount = iNum;
			break;
		}
		if( db_ret < 0 && db_ret != -1405 )
		{					
			sql_error(sqlca, oraca);	
			nRetCount = iNum;
			break;
		}
		
		SET_END_NULL(var_title);
		SET_END_NULL(var_content);
		SET_END_NULL(var_time);
		
		pUserMsg[iNum].type		= ST_WOKU_MSG::SYSTEMPUB;
		pUserMsg[iNum].recID		= msgID;
		pUserMsg[iNum].recvID		= 0;
		pUserMsg[iNum].sendID		= 0;
		memset(pUserMsg[iNum].nickname, 0,sizeof(pUserMsg[iNum].nickname));
		pUserMsg[iNum].classID		= 0;
		pUserMsg[iNum].logID		= 0;
		memset(pUserMsg[iNum].srcuri, 0, sizeof(pUserMsg[iNum].srcuri));
		memcpy((char*)pUserMsg[iNum].title, var_title.arr,var_title.len + 1);
		memcpy((char*)pUserMsg[iNum].content, var_content.arr,var_content.len + 1);
		memcpy((char*)pUserMsg[iNum].sendTime, (char*)var_time.arr, var_time.len + 1);

		if(msgID > recid)
			recid = msgID;
		
		++iNum;		
	}

	EXEC SQL CLOSE :cur_sysmsg;
	EXEC SQL FREE  :cur_sysmsg;
	return DB_SUCCESS;
}   
 
int CDatabaseWeb::Get_Broadcast_Msg(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//用户广播
{
	nRetCount=0;
	return DB_SUCCESS;
}
 
int CDatabaseWeb::Get_UserComment(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//个人主页评论
{
	nRetCount=0;
	return DB_SUCCESS;
}

 
int CDatabaseWeb::Get_OneUserComment(uint32 &recid, uint32 userid,ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//个人主页评论
{
	nRetCount=0;
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_LogComment(uint32 &recid, ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//博客内容评论
{
	nRetCount=0;
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_OneLogComment(uint32 &recid, uint32 userid,ST_WOKU_MSG *pUserMsg, uint16 &nRetCount)//博客内容评论
{
	nRetCount=0;
	return DB_SUCCESS;
}

int CDatabaseWeb::SetUserMessageStatus(uint32 recID)
{
	return DB_SUCCESS;
}

int CDatabaseWeb::Get_System_Log(uint32 &recid, ST_SYSTEM_LOG *pSystemLog, uint16 &nRetCount)
{
	nRetCount=0;
	return DB_SUCCESS;
}

int CDatabaseWeb::GetNickName(uint32 userid,char *nickname)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     userID;
		VARCHAR var_nickname[41];
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	userID = userid;
	
	SET_INIT_NULL(var_nickname);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;	
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];

start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetNickName(:userID,:var_nickname,:retcode);
		end;
	END-EXEC;	    

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (retcode != 1403 && db_ret != 1403 && db_ret >= 0)
	{
		SET_END_NULL(var_nickname);
		strncpy(nickname,(char*)var_nickname.arr,MAX_NICKNAME_LEN+1);
		return DB_SUCCESS;
	}
		
	if (db_ret<0)
	{
		sql_error(sqlca,oraca);
		return DB_ERROR;
	}

	return DB_SUCCESS;
}

int CDatabaseWeb::GetUserPicUri(uint32 userid,char *picuri)
{
	DEF_ORASET;
	EXEC SQL BEGIN DECLARE SECTION;
		unsigned int     userID;
		VARCHAR var_picuri[33];
		VARCHAR db_link_name[32];
		int		 retcode;
	EXEC SQL END DECLARE SECTION;
	
	strncpy((char*)db_link_name.arr, m_Connect,32);
	db_link_name.len = (short)strlen((char*)db_link_name.arr);

	userID = userid;
	
	SET_INIT_NULL(var_picuri);
	
	int db_ret;
	int iReconnTimes;
	bool bReconn;
	
	EXEC SQL CONTEXT USE :m_ctx[m_nMyContextid];

start:
	EXEC SQL AT :db_link_name EXECUTE
		begin
			Mini_User_Pkg.GetUserPicUri(:userID,:var_picuri,:retcode);
		end;
	END-EXEC;	    

	db_ret = sqlca.sqlcode;
	if (conn_error(db_ret))
	{
		iReconnTimes=0;
		bReconn=ConnectDB();
		while(!bReconn)
		{
			iReconnTimes++;
			sleep(iReconnTimes%10);
			bReconn=ConnectDB();
		}
		goto start;				
	}

	if (retcode != 1403 && db_ret != 1403 && db_ret >= 0)
	{
		SET_END_NULL(var_picuri);
		strncpy(picuri,(char*)var_picuri.arr,MAX_HEADURL_LEN);
		return DB_SUCCESS;
	}
		
	if (db_ret < 0)
	{
		sql_error(sqlca,oraca);
		return DB_ERROR;
	}

	return DB_SUCCESS;
}
int CDatabaseWeb::Write_System_Log(uint32 projid,char* szUserid,char* szLogid,uint32 flatid,uint32 operid)
{
	return DB_SUCCESS;
}

int CDatabaseWeb::PayMoney(uint32 userid,uint32 consumetype, uint32 logid,float money)
{
	return DB_SUCCESS;
}


int CDatabaseWeb::Get_Mobile_Msg(uint32 &recid, ST_MOBILE_MSG *pUserMsg, uint16 &nRetCount)//手机短信
{
	nRetCount=0;
	return DB_SUCCESS;
}



int CDatabaseWeb::Get_OneMobile_Msg(uint32 &recid, uint32 UserID,ST_MOBILE_MSG *pUserMsg, uint16 &nRetCount)//手机短信
{
	nRetCount=0;
	return DB_SUCCESS;
}

int CDatabaseWeb::Send_Mobile_Msg(uint32 UserID,char *szNickName, ST_MOBILE_SEND *pMsg)
{
	return DB_SUCCESS;
}





void ForDisableBuildWarningWeb()
{
	unsigned int nTest =  sqlstm.sqlvsn;
	nTest++;
}
